/*

 Available Objects
 Java Class                                                   Script variable name            Description
 ------------------------------------------------------------ ------------------------------- ---------------------------------------------------
 com.adobe.granite.workflow.exec.WorkItem                     workItem                        The current step instance.
 com.adobe.granite.workflow.WorkflowSession                   workflowSession                 The workflow session of the current step instance.
 String[] (contains process arguments)                        args                            The step arguments.
 com.adobe.granite.workflow.metadata.MetaDataMap              metaData                        The meta data of the current step instance.
 org.apache.sling.scripting.core.impl.InternalScriptHelper    sling                           Provides access to the Sling runtime environment.

 */

var TYPE_JCR_PATH = "JCR_PATH";
var DEFAULT_PROCESS_ARGS = "PROCESS_ARGS";
var DEFAULT_CONTENT_NODE_NAME = "jcr:content";

var DEFAULT_PATHMATCH =/(.+)\/([^/]+)/i; //regex check if a string is a path


var FIELDS = {
    EMAIL_TO_LIST: "toEmailList",
    EMAIL_FROM: "fromEmail",
    EMAIL_TO: "toEmail",
    EMAIL_SUBJECT: "emailSubject",

    //used for simple field config
    PROCESS_METADATAFIELD: "metaDataFields",


    //used for advanced field config
    PROCESS_FIELDCONFIG: "fieldconfig",
    PROCESS_FIELDCONFIG_KEY: "fieldconfigKey",
    PROCESS_FIELDCONFIG_VALUE: "fieldconfigValue",
    PROCESS_FIELDCONFIG_ACTION: "fieldconfigAction",

    PROCESS_ATTACH: "attach",
    PROCESS_ATTACHURL: "attachurl",
    PROCESS_ATTACHCONTENTYPE: "attachcontenttype",
    PROCESS_ATTACHTITLE: "attachtitle",
    PROCESS_ATTACHTITLEFORMATTED: "attachtitleformatted",
    PROCESS_ATTACHTERROR: "attacherror",

    PROCESS_PAYLOADPROCESS: "payloadPath",
    PROCESS_ERROR: "error",
    PAYLOAD_PATH: "payloadPath",
    PAYLOAD_RESOURCEPATH: "resourcePath",

    PAYLOAD_AUTHORPATH: "authorPath",
    PAYLOAD_PUBLISHPATH: "publishPath",
    PAYLOAD_EXTERNALPATH: "externalPath",

    PAYLOAD_LOCKEDBY: "jcr:lockOwner",
    PAYLOAD_LOCKEDBYNAME: "lockedByName",
    PAYLOAD_LOCKEDBYEMAIL: "lockedByEmail",

    PAYLOAD_CREATED: "jcr:created",
    PAYLOAD_CREATEDBY: "jcr:createdBy",
    PAYLOAD_CREATEDBYNAME: "createdByName",
    PAYLOAD_CREATEDBYEMAIL: "createdByEmail",
    PAYLOAD_MODIFIED: "jcr:lastModified",
    PAYLOAD_MODIFIEDBY: "jcr:lastModifiedBy",
    PAYLOAD_MODIFIEDBYALT: "lastModifiedBy",
    PAYLOAD_MODIFIEDBYNAME: "lastModifiedByName",
    PAYLOAD_MODIFIEDBYEMAIL: "lastModifiedByEmail",

    PAYLOAD_EMAIL_BODY: "emailBody",
    PAYLOAD_EMAIL_SUBJECT: "emailSubject",
    PAYLOAD_EMAIL_FROM: "fromEmail",
    PAYLOAD_EMAIL_TO: "toEmail"
};


var workflowData = workItem.getWorkflowData();

//var logger = Packages.org.slf4j.LoggerFactory.getLogger("processpayload.ecma");

log.error(">> PROCESS PAYLOAD {}", "START");

log.error(">> step meta, # {}", metaData);

log.error(">> sendemail process called, args # {}", Packages.java.util.Arrays.toString(args));

var session = workflowSession.getSession();
var pageManager = resource.getResourceResolver().adaptTo(Packages.com.day.cq.wcm.api.PageManager);
var resolver = resource.getResourceResolver();
var externalizer = resolver.adaptTo(Packages.com.day.cq.commons.Externalizer);
var userPropertiesService = sling.getService(Packages.com.adobe.granite.security.user.UserPropertiesService);
var userPropertiesManager = userPropertiesService.createUserPropertiesManager(session, resolver);
var userManager = resolver.adaptTo(Packages.org.apache.jackrabbit.api.security.user.UserManager);


if (TYPE_JCR_PATH == workflowData.getPayloadType()) {

    var payloadPath = workflowData.getPayload().toString();

    log.info(">> payload path: {}", payloadPath);

    if (!workflowSession.getSession().itemExists(payloadPath)) {
        log.error(">> path does not exist: {}", payloadPath);
    } else {
        log.error(">> path exist: {}", payloadPath);
        try
        {

            var payloadNode = workflowSession.getSession().getItem(payloadPath);

            log.info(">> payload payloadNode: {}", payloadNode);

            log.error(">> gathering node info: metaData={},node={}", metaData, payloadNode);

            log.error(">> gathering node information");
            var nodeParentInfo = getPayloadNodeMetadata(metaData, payloadNode, resource, workItem, workflowData, workflowSession, log);
            log.error(">> gathering node fields, {}", workItem);
            var nodeFields = getArgsMap(metaData, payloadNode, resource, workItem, workflowData, workflowSession, log);

            //TODO: need to fix dialog so that it can retrive config from workflow
            log.error(">> gathering node fields with actions");
            var nodeFieldsAdv = getArgsMapConfigWithActions(metaData, payloadNode, resource, workItem, workflowData, workflowSession, log);


            var fieldMap = merge_objects(nodeParentInfo,nodeFields);

            fieldMap = merge_objects(fieldMap,nodeFieldsAdv);

            log.error(">> gathered metadata: fieldMap={}", fieldMap);

            log.error(">> trying to add metadata");
            //add fields to workflow data
            for (var item in fieldMap) {
                var name = item.replace("/","-");
                log.error(">> workflow data: {}={}", name,  fieldMap[item]);
                try {
                    workItem.getWorkflowData().getMetaDataMap().put(name, fieldMap[item]);
                } catch (ex) {
                    log.error(">> could not save metadata field={}. {}", name, ex);
                }

            }

            log.error(">> trying to save metadata");
            //save workflow data
            updateWorkflow(log);

        } catch (e) {
            log.error(e);
        }
    }




} else {

    log.error(">> PROCESS PAYLOAD {}", "NO PAYLOAD SPECIFIED");

}



log.error(">> PROCESS PAYLOAD {}", "DONE");

/**
 * GENERIC FUNCTIONS
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */

/* METADATA ACTIONS */


function performMetadataAction(field,action,_log) {
    _log.info(">> perform action [{}] on field {}",action,field);
    try {
        switch (""+action+"") {
            case "getEmailsFromGroup":
                return getEmailsFromGroup(field);
            case "getFormattedNamesFromGroup":
                return getFormattedNamesFromGroup(field);
            case "getEmailFromUserName":
                return getEmailFromUserName(field);
            case "getNameFromUserName":
                return getNameFromUserName(field);
        }
    } catch (ex) {
        _log.error("ERR-ACTION-001: could perform action on field {}",field,action);
    }

    return field;
}

/* WORKFLOW METADATA */

function getServiceConfig() {
    var argsInfo = {};

    //get author path
    argsInfo[FIELDS.PAYLOAD_AUTHORPATH]  = getAuthorAddress();
    argsInfo[FIELDS.PAYLOAD_PUBLISHPATH]  = getPublishAddress();
    argsInfo[FIELDS.PAYLOAD_EXTERNALPATH]  = getExternalAddress();

    return argsInfo;
}

function getPayloadNodeMetadata(_metaData,payloadNode,_resource,_workItem,_workflowData,_workflowSession,_log) {

    var argsInfo = {};

    var playloadPath = payloadNode.getPath();
    var resourcePath = payloadNode.getPath();
    var parentNode = payloadNode;

    //move up to parent from resource nodes
    argsInfo[FIELDS.PAYLOAD_PATH] = payloadNode.getPath();
    if (playloadPath.indexOf(DEFAULT_CONTENT_NODE_NAME)) {
        resourcePath = playloadPath.substring(0,playloadPath.indexOf(DEFAULT_CONTENT_NODE_NAME)-1);
    }

    argsInfo[FIELDS.PAYLOAD_RESOURCEPATH] = resourcePath;

    argsInfo[FIELDS.PAYLOAD_CREATED] = getNodePropertyAsString(payloadNode, FIELDS.PAYLOAD_ASIGNEE, "", true);
    argsInfo[FIELDS.PAYLOAD_CREATEDBY] = getNodePropertyAsString(payloadNode, FIELDS.PAYLOAD_CREATEDBY, "", true);
    argsInfo[FIELDS.PAYLOAD_MODIFIED] = getNodePropertyAsString(payloadNode, FIELDS.PAYLOAD_MODIFIED, "", true);
    argsInfo[FIELDS.PAYLOAD_MODIFIEDBY] = getNodePropertyAsString(payloadNode, FIELDS.PAYLOAD_MODIFIEDBY, "", true);
    argsInfo[FIELDS.PAYLOAD_LOCKEDBY] = getNodePropertyAsString(payloadNode, FIELDS.PAYLOAD_LOCKEDBY, "", true);

    argsInfo[FIELDS.PAYLOAD_MODIFIEDBYALT] = getNodePropertyAsString(parentNode, FIELDS.PAYLOAD_MODIFIEDBYALT, "");


    if (_isNotEmpty(argsInfo[FIELDS.PAYLOAD_CREATEDBY])) {
        argsInfo[FIELDS.PAYLOAD_CREATEDBYNAME] = getFormatedUserName(resolver, argsInfo[FIELDS.PAYLOAD_CREATEDBY]);
        argsInfo[FIELDS.PAYLOAD_CREATEDBYEMAIL] = getUserEmail(userManager,userPropertiesManager, argsInfo[FIELDS.PAYLOAD_CREATEDBY]);
    }

    if (_isNotEmpty(argsInfo[FIELDS.PAYLOAD_LOCKEDBY])) {
        argsInfo[FIELDS.PAYLOAD_LOCKEDBYNAME] = getFormatedUserName(resolver, argsInfo[FIELDS.PAYLOAD_LOCKEDBY]);
        argsInfo[FIELDS.PAYLOAD_LOCKEDBYEMAIL] = getUserEmail(userManager,userPropertiesManager, argsInfo[FIELDS.PAYLOAD_LOCKEDBY]);
    }

    if (_isNotEmpty(argsInfo[FIELDS.PAYLOAD_MODIFIEDBY])) {
        argsInfo[FIELDS.PAYLOAD_MODIFIEDBYNAME] = getFormatedUserName(resolver, argsInfo[FIELDS.PAYLOAD_MODIFIEDBY]);
        argsInfo[FIELDS.PAYLOAD_MODIFIEDBYEMAIL] = getUserEmail(userManager,userPropertiesManager, argsInfo[FIELDS.PAYLOAD_MODIFIEDBY]);
    } else {
        if (_isNotEmpty(argsInfo[FIELDS.PAYLOAD_MODIFIEDBYALT])) {
            argsInfo[FIELDS.PAYLOAD_MODIFIEDBYNAME] = getFormatedUserName(resolver, argsInfo[FIELDS.PAYLOAD_MODIFIEDBYALT]);
            argsInfo[FIELDS.PAYLOAD_MODIFIEDBYEMAIL] = getUserEmail(userManager,userPropertiesManager, argsInfo[FIELDS.PAYLOAD_MODIFIEDBYALT]);
        }
    }

    return argsInfo;

}

//Simple collection of Fields from Workflow
function getArgsMapSimple(_metaData,_workItem,_workflowData,_workflowSession,_log) {
    var argsInfo = {};

    //copy values from metadata into our array
    try {
        var wfmeta = _workItem.getWorkflowData().getMetaDataMap();
        var items = new Packages.java.util.ArrayList(wfmeta.keySet());
        _log.info(">> getArgsMapSimple: items {},{}", items,items.size());
        for (var i=0; i < items.size();i++) {
            var entry = items.get(i);
            _log.info(">> getArgsMapSimple: item {}={}", entry, wfmeta.get(entry,""));

            argsInfo[entry] = wfmeta.get(entry,"");
        }
    } catch (ex) {
        _log.error(">> getArgsMapSimple: load field config. {}",ex);
        argsInfo[FIELDS.PROCESS_ERROR]="ERR-PRCPLD-015: could not load field config";
    }


    return argsInfo;
}

function getArgsMapLegacy(_metaData,payloadNode,_resource,_workItem,_workflowData,_workflowSession,_log) {

    _log.info(">> getArgsMapLegacy: metaData={}", _metaData);
    _log.info(">> getArgsMapLegacy: payloadNode={}", payloadNode);

    var argsInfo = {};

    _log.info(">> using PROCESS_ARGS metaData = {}", _metaData.get(DEFAULT_PROCESS_ARGS));

    var args = _metaData.get(DEFAULT_PROCESS_ARGS).split(",");

    _log.info(">> legacy args: #{},{}", args.length, Packages.java.util.Arrays.toString(args));

    for (var i = 0; i < args.length; i++) {
        var argName = "";
        try {
            argName = args[i];
            if (payloadNode.hasProperty(args[i])) {
                var prop = payloadNode.getProperty(args[i]);
                if (prop) {
                    if (!prop.isMultiple()) {
                        argsInfo["" + args[i] + ""] = payloadNode.getProperty(args[i]).getString(); //meta.get(args[i], "");
                    } else {
                        var values = prop.getValues();
                        var items="";
                        for(var i=0;i <values.length; i++){
                            items += values[i].toString();
                        }
                        argsInfo["" + args[i] + ""] = items;
                    }
                } else {
                    _log.info(">> payload info item is null: {}={}", args[i], argsInfo["" + args[i] + ""]);
                }
                _log.info(">> payload info item: {}={}", args[i], argsInfo["" + args[i] + ""]);

            } else {
                argsInfo["" + args[i] + ""] = "";
                _log.info(">> payload info item: {} does not exist", args[i]);
            }

        } catch (ex) {
            _log.error("could not process legacy info: {}. {}", argName, ex);
            argsInfo[FIELDS.PROCESS_ERROR] = "ERR-SENDEMAIL-002: not able to evaluate legacy args: " + argName;
        }
    }


    return argsInfo;
}



function getArgsMapConfig(_metaData,payloadNode,_resource,_workItem,_workflowData,_workflowSession,_log){

    _log.info(">> getArgsMapConfig: metaData={}", _metaData);
    _log.info(">> getArgsMapConfig: payloadNode={}", payloadNode);

    var argsInfo = {};

    _log.info(">> using metaData");

    //ONLY READING THE FIELDS THAT HAVE BEEN SELECTED IN WORKFLOW STEP
    var blankArray = _blankArray();
    var metaDataFields = _workItem.getNode().getMetaDataMap().get(FIELDS.PROCESS_METADATAFIELD,blankArray);
    //this dont work as the String[] is turned into String
    //var metaDataFields = _metaData.get(PROCESS_METADATAFIELD,blankArray);
    _workItem.getNode()
    try {
        for (var i = 0; i < metaDataFields.length; i++) {
            _log.info(">> field: {}",metaDataFields[i]);
            var fieldMetaArray = metaDataFields[i].split("=");
            if (fieldMetaArray[0]!="" && fieldMetaArray[1]!="") {
                var fieldKey=fieldMetaArray[0];
                var fieldValueKey=fieldMetaArray[1];
                _log.info(">> field name={}, value={}",fieldKey,fieldValueKey);
                if (payloadNode.hasProperty(fieldValueKey)) {

                    var prop = payloadNode.getProperty(fieldValueKey);
                    if (!prop.isMultiple()) {
                        argsInfo["" + fieldKey + ""] = prop.getString(); //meta.get(args[i], "");
                        _log.info(">> meta info item single: {}={}", fieldKey, argsInfo["" + fieldKey + ""]);
                    } else {
                        argsInfo["" + fieldKey + ""] = prop.getValues(); //meta.get(args[i], "");
                        _log.info(">> meta info item multi: {}={}", fieldKey, argsInfo["" + fieldKey + ""]);
                    }

                } else {
                    argsInfo["" + fieldKey + ""] = "";
                    _log.info(">> meta info item [{}] does not exist", fieldKey);
                }
            }
        }
    } catch (ex) {
        _log.error("could not process metadata info. {}",ex);
        argsInfo[FIELDS.PROCESS_ERROR]="ERR-PRCPLD-003: not able to evaluate legacy args";
    }

    return argsInfo;
}


function getArgsMapConfigWithActions(_metaData,payloadNode,_resource,_workItem,_workflowData,_workflowSession,_log){

    _log.error(">> getArgsMapConfigWithActions: metaData={}", _metaData);
    _log.error(">> getArgsMapConfigWithActions: payloadNode={}", payloadNode);

    var argsInfo = {};

    _log.error(">> using metaData with Actions");

    //ONLY READING THE FIELDS THAT HAVE BEEN SELECTED IN WORKFLOW STEP
    var blankArray = _blankArray();

    //var blankArray = new Packages.org.apache.commons.lang3.StringUtils.split(" ");

    _log.error(">> has config: {}",  _workItem.getNode().getMetaDataMap().containsKey(FIELDS.PROCESS_FIELDCONFIG));

    // var fieldConfig = _workItem.getNode().getMetaDataMap().get(FIELDS.PROCESS_FIELDCONFIG,blankArray);

    var fieldConfigKey = _workItem.getNode().getMetaDataMap().get(FIELDS.PROCESS_FIELDCONFIG_KEY,blankArray);
    var fieldConfigValue = _workItem.getNode().getMetaDataMap().get(FIELDS.PROCESS_FIELDCONFIG_VALUE,blankArray);
    var fieldConfigAction = _workItem.getNode().getMetaDataMap().get(FIELDS.PROCESS_FIELDCONFIG_ACTION,blankArray);

    _log.error(">> using metaData with Actions: fieldConfigKey=[{}],fieldConfigValue=[{}],fieldConfigAction=[{}]",fieldConfigKey, fieldConfigValue, fieldConfigAction);

    try {
        if ( fieldConfigKey.length == fieldConfigValue.length && fieldConfigKey.length == fieldConfigAction.length) {
            for (var i = 0; i < fieldConfigKey.length; i++) {
                //var metaItem = JSON.parse(fieldConfig[i]);
                var fieldName = fieldConfigKey[i];
                var fieldPath = fieldConfigValue[i];
                var fieldAction = fieldConfigAction[i];

                _log.error(">> payload item: field name [{}]", fieldName);
                _log.error(">> payload item: field path [{}]", fieldPath);
                _log.error(">> payload item: field action [{}]", fieldAction);

                if (fieldName && fieldPath) {
                    var fieldValue = getNodePropertyAsString(payloadNode, fieldPath, "");
                    if (_isNotEmpty(fieldAction)) {
                        var fieldValuePostAction = "";
                        fieldValuePostAction = performMetadataAction(fieldValue, fieldAction,_log);
                        _log.error(">> form info item: action {}={}", fieldValue, fieldValuePostAction);
                        fieldValue = fieldValuePostAction;
                    }
                    argsInfo[fieldName] = fieldValue;
                    _log.error(">> form info item: output {}={}", fieldName, fieldValue);
                } else {
                    argsInfo[FIELDS.PROCESS_ERROR] = "ERR-SENDEMAIL-004: field in not complete";
                }

            }
        }
    } catch (ex) {
        _log.error("could not perform action {}",ex);
        argsInfo[FIELDS.PROCESS_ERROR]="ERR-SENDEMAIL-005: could not field config";
    }
    return argsInfo;
}


function getArgsMap(_metaData,payloadNode,_resource,_workItem,_workflowData,_workflowSession,_log){

    _log.info(">> getArgsMap: metaData={}", _metaData);
    _log.info(">> getArgsMap: payloadNode={}", payloadNode);

    var argsInfo = {};


    if(_metaData.get(FIELDS.PROCESS_ARGS)) { // legacy, using 'PROCESS_ARGS' if set
        _log.error(">> PROCESSSING LEGACY");
        argsInfo = getArgsMapLegacy(_metaData,payloadNode,_resource,_workItem,_workflowData,_workflowSession,_log);
    } else if (!_metaData.get(FIELDS.PROCESS_ARGS)) { // legacy, using 'PROCESS_ARGS' if not set
        _log.error(">> PROCESSSING CONFIG");
        argsInfo = getArgsMapConfig(_metaData,payloadNode,_resource,_workItem,_workflowData,_workflowSession,_log);
    } else {
        _log.error(">> no valid parameter configurations passed.");
        argsInfo[FIELDS.PROCESS_ERROR]="ERR-PRCPLD-001: not able to evaluate metadata config";
    }

    return argsInfo;

}


/* TEMPLATE FUNCTIONS */


function sendMailText(_emailTemplatePath,_fieldMap,_workflowSession) {
    var templateType = Packages.org.apache.commons.mail.SimpleEmail;

    log.error(">> sendMailText templateType: {}", templateType);

    var mailTemplate = Packages.com.day.cq.commons.mail.MailTemplate.create(_emailTemplatePath, _workflowSession.getSession());

    log.error(">> sendMailText mailTemplate: {}", mailTemplate);

    var templatedEmail = mailTemplate.getEmail(Packages.org.apache.commons.lang.text.StrLookup.mapLookup(_fieldMap), templateType);

    var toListString = fieldMap[FIELDS.EMAIL_TO_LIST];
    if (toListString) {
        var toList = toListString.split(",");
        log.error(">> send email to address list: {}", toList);
        for (var to in toList) {
            var toAddress = toList[to];
            if (_isNotBlank(toAddress)) {
                templatedEmail.addTo(toAddress);
                log.error(">> adding To recipient to email {}", toAddress);
            }
        }
    }

    log.error(">> sendMailText templatedEmail: {}", templatedEmail);

    var messageGatewayService = sling.getService(Packages.com.day.cq.mailer.MessageGatewayService);

    log.error(">> sendMailText MessageGatewayService: {}", messageGatewayService);

    var messageGateway = messageGatewayService.getGateway(Packages.org.apache.commons.mail.Email);

    log.error(">> sendMailText messageGateway: {}", messageGateway);

    log.error(">> sendMailText sending email");

    try {
        messageGateway.send(templatedEmail);
    } catch (ex) {
        log.error(">> sendMailText email sent error {}",ex);
    }
    log.error(">> sendMailText email sent");
}

function sendMailHtml(_emailTemplatePath,_fieldMap,_workflowSession) {
    var templateType = Packages.org.apache.commons.mail.HtmlEmail;

    log.error(">> sendMailHtml templateType: {}", templateType);

    var mailTemplate = Packages.com.day.cq.commons.mail.MailTemplate.create(_emailTemplatePath, _workflowSession.getSession());

    log.error(">> sendMailHtml mailTemplate: {}", mailTemplate);

    var templatedEmail = mailTemplate.getEmail(Packages.org.apache.commons.lang.text.StrLookup.mapLookup(_fieldMap), templateType);

    var toListString = fieldMap[FIELDS.EMAIL_TO_LIST];
    if (toListString) {
        var toList = toListString.split(",");
        log.error(">> send email to address list: {}", toList);
        for (var to in toList) {
            var toAddress = toList[to];
            if (_isNotBlank(toAddress)) {
                templatedEmail.addTo(toAddress);
                log.error(">> adding To recipient to email {}", toAddress);
            }
        }
    }

    log.error(">> sendMailHtml templatedEmail: {}", templatedEmail.toString());

    var messageGatewayService = sling.getService(Packages.com.day.cq.mailer.MessageGatewayService);

    log.error(">> sendMailHtml MessageGatewayService: {}", messageGatewayService);

    var messageGateway = messageGatewayService.getGateway(Packages.org.apache.commons.mail.Email);

    log.error(">> sendMailHtml messageGateway: {}", messageGateway);

    log.error(">> sendMailHtml sending email");

    try {
        messageGateway.send(templatedEmail);
    } catch (ex) {
        log.error(">> sendMailHtml email sent error {}",ex);
    }
    log.error(">> sendMailHtml email sent");
}



function attachUrl(url,contentType,attachtitle,_fieldMap,_templatedEmail,_workItem,_sling,_workflowSession,_request) {

    if (contentType == "") {
        contentType = "application/octet-stream";
    }



    try {
        log.error(">> updating workflow data: {}={}", FIELDS.PROCESS_ATTACHURL, url);
        _workItem.getWorkflowData().getMetaDataMap().put(FIELDS.PROCESS_ATTACHURL, url);

        log.error(">> updating workflow data: {}={}", FIELDS.PROCESS_ATTACHCONTENTYPE, contentType);
        _workItem.getWorkflowData().getMetaDataMap().put(FIELDS.PROCESS_ATTACHCONTENTYPE, contentType);

        var _slingRepository = _sling.getService(Packages.org.apache.sling.jcr.api.SlingRepository);
        var _resolverFactory = _sling.getService(Packages.org.apache.sling.api.resource.ResourceResolverFactory);
        var _resolver = _sling.getService(Packages.org.apache.sling.jcr.resource.JcrResourceResolverFactory).getResourceResolver(_workflowSession.getSession());
        var _requestResponseFactory = _sling.getService(Packages.com.day.cq.contentsync.handler.util.RequestResponseFactory);
        var _requestProcessor = _sling.getService(Packages.org.apache.sling.engine.SlingRequestProcessor);
        var _session = _workflowSession.getSession();

        log.error(">> _session: {}", _session);
        log.error(">> _slingRepository: {}", _slingRepository);
        log.error(">> _resolverFactory: {}", _resolverFactory);
        log.error(">> _resolver: {}", _resolver);
        log.error(">> _request: {}", _request);
        log.error(">> _requestResponseFactory: {}", _requestResponseFactory);
        log.error(">> _requestProcessor: {}", _requestProcessor);
        log.error(">> _workflowSession.getUser(): {}", _workflowSession.getUser());

        /* Process request through Sling */
        var _req = _requestResponseFactory.createRequest("GET", url);
        var _out = new Packages.java.io.ByteArrayOutputStream();
        var _resp = _requestResponseFactory.createResponse(_out);

        _requestProcessor.processRequest(_req, _resp, _request.getResourceResolver());

        var _attachment = new Packages.javax.mail.util.ByteArrayDataSource(_out.toByteArray(), contentType);

        //var fileName = Packages.java.text.MessageFormat(FORM_DOR_NAME_FORMAT,);

        var attachmentFileName = messageFormat(attachtitle, _fieldMap);

        log.error(">> formatted file name {}", attachmentFileName);

        log.error(">> updating workflow data: {}={}", FIELDS.PROCESS_ATTACHTITLEFORMATTED, attachmentFileName);
        _workItem.getWorkflowData().getMetaDataMap().put(FIELDS.PROCESS_ATTACHTITLEFORMATTED, attachmentFileName);

        log.error(">> updating workflow data");

        _templatedEmail.attach(_attachment, attachmentFileName, attachmentFileName);
    } catch (ex) {
        log.error("ERR-ATTACH-001: could not attach url {}",url);
        log.error(ex);
        _workItem.getWorkflowData().getMetaDataMap().put(FIELDS.PROCESS_ATTACHTERROR, "ERR-ATTACH-001: could not attach url");
    }
}




/* EXTERNALIZER FUNCTIONS */


function getAuthorAddress() {
    //get author path without backslash
    var serverAddress = getAuthorLink(externalizer, "/");
    if (serverAddress.lastIndexOf("/") == (serverAddress.length() - 1)) {
        serverAddress = serverAddress.substring(0, serverAddress.lastIndexOf("/"))
    }
    return serverAddress;
}

function getPublishAddress() {
    //get author path without backslash
    var serverAddress = getPublisherLink(externalizer, "/");
    if (serverAddress.lastIndexOf("/") == (serverAddress.length() - 1)) {
        serverAddress = serverAddress.substring(0, serverAddress.lastIndexOf("/"))
    }
    return serverAddress;
}

function getExternalAddress() {
    //get author path without backslash
    var serverAddress = getExternalLink(externalizer, "/");
    if (serverAddress.lastIndexOf("/") == (serverAddress.length() - 1)) {
        serverAddress = serverAddress.substring(0, serverAddress.lastIndexOf("/"))
    }
    return serverAddress;
}

function getPublisherLink(externalizer,path) {
    return externalizer.publishLink(resolver, path);
}
function getAuthorLink(externalizer,path) {
    return externalizer.authorLink(resolver, path);
}
function getExternalLink(externalizer,path) {
    return externalizer.externalLink(resolver, "local", path);
}






/* USER MANAGER */


function getUserEmail(_userManager,_userPropertiesManager,userId) {
    return getUserEmail(resolver,userId,defaultValue,undefined);
}
function getUserEmail(_userManager,_userPropertiesManager,userId,defaultValue) {
    try {
        if (!defaultValue) {
            defaultValue = "";
        }
        var userAuth = _userManager.getAuthorizable(userId);
        if (userAuth!=null) {
            var userProps = _userPropertiesManager.getUserProperties(userAuth, "profile");
            if (userProps != null) {
                var email = userProps.getProperty("email");

                log.error(">> getUserEmail: userId: {}, email: {}", userId, email);
            } else {
                log.error(">> getUserEmail: userId: {}, has not profile", userId);
            }

            if (!email) {
                email = defaultValue;
            }
        } else {
            log.error(">> getUserEmail: userId: {}, does not exist1", userId);
        }
        return email;
    } catch (ex) {
        log.error("could not get users email {}, {}",userId,ex);
        return defaultValue || "";
    }
}


function getFormatedUserName(resolver,userId) {
    return getFormatedUserName(resolver,userId,defaultValue,undefined);
}
function getFormatedUserName(resolver,userId,defaultValue) {
    if (!defaultValue) {
        defaultValue = "External User";
    }
    var formatedUserName = "";
    if (_isBlank(userId)) {
        formatedUserName = defaultValue;
    } else {
        try {
            formatedUserName = Packages.com.adobe.granite.security.user.util.AuthorizableUtil.getFormattedName(resolver, userId);
        } catch (ex) {
            formatedUserName = defaultValue;
        }
    }
    return formatedUserName;
}


function getEmailsFromGroup(value) {
    var emails = "";
    if (_isNotEmpty(value)) {
        var primaryGroup = userManager.getAuthorizable(value);
        var members = primaryGroup.getDeclaredMembers();
        var emailList= [];
        while (members.hasNext())
        {
            var auth = members.next();
            if (auth != null)
            {
                var memberId = auth.getID();
                emailList.push(getUserEmail(userManager,userPropertiesManager, memberId));
                emails = emailList.join(",");
            }
        }
    }
    return emails;
}


function getFormattedNamesFromGroup(value) {
    var names = "";
    if (_isNotEmpty(value)) {
        var primaryGroup = userManager.getAuthorizable(value);
        var members = primaryGroup.getDeclaredMembers();
        var namesList= [];
        while (members.hasNext())
        {
            var auth = members.next();
            if (auth != null)
            {
                var memberId = auth.getID();
                namesList.push(getFormatedUserName(resolver, memberId));
                names = namesList.join("<br>");
            }
        }
    }
    return names;
}


function getEmailFromUserName(value) {
    var email = "";
    if (_isNotEmpty(value)) {
        var auth = userManager.getAuthorizable(value);
        if (auth != null)
        {
            var memberId = auth.getID();
            email = getUserEmail(userManager,userPropertiesManager, memberId);
        }
    }
    return email;
}

function getNameFromUserName(value) {
    var name = "";
    if (_isNotEmpty(value)) {
        var auth = userManager.getAuthorizable(value);
        if (auth != null)
        {
            var memberId = auth.getID();
            name = getFormatedUserName(resolver, memberId);
        }
    }
    return name;
}






/* JCR FUNCTIONS */
function getNodePropertyAsString(_node,_nodeName,_defaultValue,_inherited) {
    if (!_inherited) {
        _inherited = false;
    }
    if(_node != undefined && _node != null) {
        if (_node.hasProperty(_nodeName)) {
            var prop = _node.getProperty(_nodeName);
            if (prop) {
                return prop.toString();
            }
        } else if (_inherited) {
            if (_node.getParent().hasProperty(_nodeName)) {
                var prop = _node.getParent().getProperty(_nodeName);
                if (prop) {
                    return prop.toString();
                }
            }
        }
    }
    return _defaultValue;
}

function geResourcePropertyAsString(resource,propName,defaultValue) {

    if(resource != undefined && resource != null) {

        var resourceIVM = new Packages.com.day.cq.commons.inherit.HierarchyNodeInheritanceValueMap(resource);
        return resourceIVM.getInherited(propName,"");
    } else {
        return defaultValue;
    }
}


/* GENERIC WORFKLOW FUNCTIONS */


function saveSession(_workflowSession) {
    _workflowSession.getSession().save();
}

function updateMetadata(name,value) {
    workItem.getWorkflowData().getMetaDataMap().put(name, value);
}

function replaceMetadata(name,value,_log) {

    _log.info("-> replaceMetadata {}, {}",name,value);
    try {
        _log.info(">> remove {}", name);
        // workItem.getWorkflowData().getMetaDataMap().setMetaDataProperty

        workItem.getWorkflowData().getMetaDataMap().remove(name);
        workItem.getMetaDataMap().remove(name);
        // saveSession();
//        workflowSession.updateWorkflowData(workItem.getWorkflow(), workItem.getWorkflowData());
        _log.info(">> saved {}", workItem.getWorkflowData().getMetaDataMap());
        _log.info(">> add {}, {}", name, value);
        workItem.getMetaDataMap().put(name, value);
        workItem.getWorkflowData().getMetaDataMap().put(name, value);
//        saveSession();
        //      workflowSession.updateWorkflowData(workItem.getWorkflow(), workItem.getWorkflowData());
        _log.info(">> saved {}", workItem.getWorkflowData().getMetaDataMap());
    } catch (ex) {
        _log.error("Could not replace metadata item {} with {}",name,value);
    }
}

function _converToValues(array) {
    return Packages.com.adobe.granite.workflow.core.metadata.MetaDataUtilImpl.convertToValues(array);
}

function updateWorkflow(_log) {
    try {
        workflowSession.updateWorkflowData(workItem.getWorkflow(), workItem.getWorkflowData());
    } catch (ex) {
        _log.error("Could not save workflow metadata {}",ex);
    }
}


function validateMetadata(_metadata,_workflowSession,_workItem) {
    try {
        if (FIELDS.TYPE_JCR_PATH == workflowData.getPayloadType()) {
            var path = _workItem.getWorkflowData().getPayload().toString();

            if (_workflowSession.getSession().itemExists(path)) {
                return true;
            } else {
                updateMetadata(FIELDS.WORKFLOW_ERROR, "payload path does not exist");
            }

        } else {
            updateMetadata(FIELDS.WORKFLOW_ERROR, "invalid playload type");
        }
        return false;
    } catch (ex) {
        updateMetadata(FIELDS.WORKFLOW_ERROR, ex);
    }
    return false;
}

function validatePlayload(payloadNode) {
    return true;
}

/*
* HELPER FUNCTIONS
* */

function parseDate(dateString)
{
    var cal = Packages.java.util.Calendar.getInstance();
    try {
        var dateStringDate = Packages.com.day.cq.dam.commons.util.DateParser.parseDate(dateString);
        cal.setTime(dateStringDate);
    } catch(ex) {
        log.error("Could not parse time {}, {}",dateString,ex);
    }
    return cal;
}


function messageFormat(template,fieldMap) {
    try {
        var substitutor = new Packages.org.apache.commons.lang3.text.StrSubstitutor(fieldMap);
        return substitutor.replace(template);
    } catch (ex) {

    }
    return "";
}



function _isBlank(source) {
    if (source) {
        return Packages.org.apache.commons.lang3.StringUtils.isBlank(source);
    }
    return true;
}
function _isNotBlank(source) {
    if (source) {
        return Packages.org.apache.commons.lang3.StringUtils.isNotBlank(source);
    }
    return false;
}
function _isNotEmpty(source) {
    if (source) {
        return Packages.org.apache.commons.lang3.StringUtils.isNotEmpty(source);
    }
    return false;
}

function _blankArray() {
    return Packages.org.apache.commons.lang3.StringUtils.split(" ");
}

function _split(string,separator) {
    return Packages.org.apache.commons.lang3.StringUtils.split(string,separator);
}

function _join(array,separator) {
    return Packages.org.apache.commons.lang3.StringUtils.join(array,separator);
}

function _push(array,newitem) {
    return Packages.org.apache.commons.lang3.ArrayUtils.add(array,newitem);
}


function _createValidName(_name){
    return Packages.com.day.cq.commons.jcr.JcrUtil.createValidName(_name)
}

function _getOrCreateUniqueByPath(_node,_name,_type) {
    return Packages.org.apache.jackrabbit.commons.JcrUtils.getOrCreateUniqueByPath(_node,_name,_type);
}


function isAsset(_resourceResolver, _resourcePath) {
    if (_isBlank(_resourcePath)) {
        return false;
    }
    var resource = _resourceResolver.getResource(_resourcePath);
    if (resource != null) {
        return resource.adaptTo(Packages.com.adobe.granite.asset.api.Asset) != null;
    }
    return false;
}

/**
 * Overwrites obj1's values with obj2's and adds obj2's if non existent in obj1
 * @param obj1
 * @param obj2
 * @returns obj3 a new object based on obj1 and obj2
 */
function merge_objects(obj1,obj2){
    var obj3 = {};
    for (var obj1item in obj1) { obj3[obj1item] = obj1[obj1item]; }
    for (var obj2item in obj2) { obj3[obj2item] = obj2[obj2item]; }
    return obj3;
}