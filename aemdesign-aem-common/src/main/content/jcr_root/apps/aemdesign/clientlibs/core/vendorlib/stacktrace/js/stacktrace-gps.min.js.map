{"version":3,"sources":["stackframe.js","bundle.js","stacktrace-gps.js"],"names":["root","factory","define","amd","exports","module","StackFrame","this","_isNumber","n","isNaN","parseFloat","isFinite","_capitalize","str","toUpperCase","substring","_getter","p","obj","Object","props","booleanProps","concat","numericProps","stringProps","arrayProps","i","length","hasOwnProperty","undefined","prototype","getArgs","args","setArgs","v","toString","call","TypeError","getEvalOrigin","evalOrigin","setEvalOrigin","functionName","getFunctionName","join","fileName","getFileName","lineNumber","getLineNumber","columnNumber","getColumnNumber","Boolean","j","Number","k","String","SourceMap","modules","__webpack_require__","moduleId","installedModules","id","loaded","m","c","SourceMapConsumer","aSourceMap","sourceMap","JSON","parse","replace","sections","IndexedSourceMapConsumer","BasicSourceMapConsumer","version","util","getArg","sources","names","sourceRoot","sourcesContent","mappings","file","_version","Error","map","normalize","source","isAbsolute","relative","_names","ArraySet","fromArray","_sources","_mappings","Mapping","generatedLine","generatedColumn","originalLine","originalColumn","name","lastOffset","line","column","_sections","s","url","offset","offsetLine","offsetColumn","generatedOffset","consumer","binarySearch","base64VLQ","quickSort","fromSourceMap","__generatedMappings","defineProperty","get","_parseMappings","__originalMappings","_charIsMappingSeparator","aStr","index","charAt","aSourceRoot","GENERATED_ORDER","ORIGINAL_ORDER","GREATEST_LOWER_BOUND","LEAST_UPPER_BOUND","eachMapping","aCallback","aContext","aOrder","context","order","_generatedMappings","_originalMappings","mapping","at","forEach","allGeneratedPositionsFor","aArgs","needle","has","indexOf","_findMapping","compareByOriginalPositions","push","lastColumn","create","smc","toArray","_sourceRoot","_generateSourcesContent","_file","generatedMappings","slice","destGeneratedMappings","destOriginalMappings","srcMapping","destMapping","segment","end","value","previousGeneratedColumn","previousOriginalLine","previousOriginalColumn","previousSource","previousName","cachedSegments","temp","originalMappings","decode","rest","compareByGeneratedPositionsDeflated","aNeedle","aMappings","aLineName","aColumnName","aComparator","aBias","search","computeColumnSpans","nextMapping","lastGeneratedColumn","Infinity","originalPositionFor","hasContentsOfAllSources","size","some","sc","sourceContentFor","aSource","nullOnMissing","urlParse","fileUriAbsPath","scheme","path","generatedPositionFor","constructor","sectionIndex","section","cmp","bias","every","content","generatedPosition","ret","sectionMappings","add","adjustedMapping","aName","aDefaultValue","arguments","aUrl","match","urlRegexp","auth","host","port","urlGenerate","aParsedUrl","aPath","part","parts","split","up","splice","aRoot","aPathUrl","aRootUrl","dataUrlRegexp","joined","level","lastIndexOf","Array","substr","identity","toSetString","isProtoString","fromSetString","charCodeAt","mappingA","mappingB","onlyCompareOriginal","onlyCompareGenerated","strcmp","aStr1","aStr2","compareByGeneratedPositionsInflated","supportsNullProto","recursiveSearch","aLow","aHigh","aHaystack","aCompare","mid","Math","floor","_array","_set","aArray","aAllowDuplicates","set","len","getOwnPropertyNames","sStr","isDuplicate","idx","aIdx","toVLQSigned","aValue","fromVLQSigned","isNegative","shifted","base64","VLQ_BASE_SHIFT","VLQ_BASE","VLQ_BASE_MASK","VLQ_CONTINUATION_BIT","encode","digit","encoded","vlq","aIndex","aOutParam","continuation","strLen","result","shift","intToCharMap","number","charCode","bigA","bigZ","littleA","littleZ","zero","nine","plus","slash","littleOffset","numberOffset","swap","ary","x","y","randomIntInRange","low","high","round","random","doQuickSort","comparator","r","pivotIndex","pivot","q","require","StackTraceGPS","_xdr","Promise","resolve","reject","req","XMLHttpRequest","open","onerror","onreadystatechange","readyState","status","responseText","send","_atob","b64str","window","atob","_parseJson","string","_findFunctionName","syntaxes","lines","code","maxLines","min","commentPos","exec","_ensureSupportedEnvironment","_ensureStackFrameIsLegit","stackframe","_findSourceMappingURL","_extractLocationInfoFromSourceMapSource","sourceMapConsumer","sourceCache","loc","mappedSource","opts","sourceMapConsumerCache","ajax","_get","location","isDataUrl","offline","supportedEncodingRegexp","sourceMapStart","encodedSource","xhrPromise","method","then","bind","_getSourceMapConsumer","sourceMappingURL","defaultSourceRoot","sourceMapConsumerPromise","sourceMapSource","pinpoint","getMappedLocation","mappedStackFrame","resolveMappedStackFrame","findFunctionName","guessedFunctionName","test"],"mappings":"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","file":"stacktrace-gps.min.js","sourcesContent":["(function (root, factory) {\n    'use strict';\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.\n\n    /* istanbul ignore next */\n    if (typeof define === 'function' && define.amd) {\n        define('stackframe', [], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        root.StackFrame = factory();\n    }\n}(this, function () {\n    'use strict';\n    function _isNumber(n) {\n        return !isNaN(parseFloat(n)) && isFinite(n);\n    }\n\n    function _capitalize(str) {\n        return str[0].toUpperCase() + str.substring(1);\n    }\n\n    function _getter(p) {\n        return function () {\n            return this[p];\n        };\n    }\n\n    var booleanProps = ['isConstructor', 'isEval', 'isNative', 'isToplevel'];\n    var numericProps = ['columnNumber', 'lineNumber'];\n    var stringProps = ['fileName', 'functionName', 'source'];\n    var arrayProps = ['args'];\n\n    function StackFrame(obj) {\n        if (obj instanceof Object) {\n            var props = booleanProps.concat(numericProps.concat(stringProps.concat(arrayProps)));\n            for (var i = 0; i < props.length; i++) {\n                if (obj.hasOwnProperty(props[i]) && obj[props[i]] !== undefined) {\n                    this['set' + _capitalize(props[i])](obj[props[i]]);\n                }\n            }\n        }\n    }\n\n    StackFrame.prototype = {\n        getArgs: function () {\n            return this.args;\n        },\n        setArgs: function (v) {\n            if (Object.prototype.toString.call(v) !== '[object Array]') {\n                throw new TypeError('Args must be an Array');\n            }\n            this.args = v;\n        },\n\n        getEvalOrigin: function () {\n            return this.evalOrigin;\n        },\n        setEvalOrigin: function (v) {\n            if (v instanceof StackFrame) {\n                this.evalOrigin = v;\n            } else if (v instanceof Object) {\n                this.evalOrigin = new StackFrame(v);\n            } else {\n                throw new TypeError('Eval Origin must be an Object or StackFrame');\n            }\n        },\n\n        toString: function () {\n            var functionName = this.getFunctionName() || '{anonymous}';\n            var args = '(' + (this.getArgs() || []).join(',') + ')';\n            var fileName = this.getFileName() ? ('@' + this.getFileName()) : '';\n            var lineNumber = _isNumber(this.getLineNumber()) ? (':' + this.getLineNumber()) : '';\n            var columnNumber = _isNumber(this.getColumnNumber()) ? (':' + this.getColumnNumber()) : '';\n            return functionName + args + fileName + lineNumber + columnNumber;\n        }\n    };\n\n    for (var i = 0; i < booleanProps.length; i++) {\n        StackFrame.prototype['get' + _capitalize(booleanProps[i])] = _getter(booleanProps[i]);\n        StackFrame.prototype['set' + _capitalize(booleanProps[i])] = (function (p) {\n            return function (v) {\n                this[p] = Boolean(v);\n            };\n        })(booleanProps[i]);\n    }\n\n    for (var j = 0; j < numericProps.length; j++) {\n        StackFrame.prototype['get' + _capitalize(numericProps[j])] = _getter(numericProps[j]);\n        StackFrame.prototype['set' + _capitalize(numericProps[j])] = (function (p) {\n            return function (v) {\n                if (!_isNumber(v)) {\n                    throw new TypeError(p + ' must be a Number');\n                }\n                this[p] = Number(v);\n            };\n        })(numericProps[j]);\n    }\n\n    for (var k = 0; k < stringProps.length; k++) {\n        StackFrame.prototype['get' + _capitalize(stringProps[k])] = _getter(stringProps[k]);\n        StackFrame.prototype['set' + _capitalize(stringProps[k])] = (function (p) {\n            return function (v) {\n                this[p] = String(v);\n            };\n        })(stringProps[k]);\n    }\n\n    return StackFrame;\n}));\n","var SourceMap =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* -*- Mode: js; js-indent-level: 2; -*- */\n\t/*\n\t * Copyright 2011 Mozilla Foundation and contributors\n\t * Licensed under the New BSD license. See LICENSE or:\n\t * http://opensource.org/licenses/BSD-3-Clause\n\t */\n\n\tvar util = __webpack_require__(1);\n\tvar binarySearch = __webpack_require__(2);\n\tvar ArraySet = __webpack_require__(3).ArraySet;\n\tvar base64VLQ = __webpack_require__(4);\n\tvar quickSort = __webpack_require__(6).quickSort;\n\n\tfunction SourceMapConsumer(aSourceMap) {\n\t  var sourceMap = aSourceMap;\n\t  if (typeof aSourceMap === 'string') {\n\t    sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n\t  }\n\n\t  return sourceMap.sections != null\n\t    ? new IndexedSourceMapConsumer(sourceMap)\n\t    : new BasicSourceMapConsumer(sourceMap);\n\t}\n\n\tSourceMapConsumer.fromSourceMap = function(aSourceMap) {\n\t  return BasicSourceMapConsumer.fromSourceMap(aSourceMap);\n\t}\n\n\t/**\n\t * The version of the source mapping spec that we are consuming.\n\t */\n\tSourceMapConsumer.prototype._version = 3;\n\n\t// `__generatedMappings` and `__originalMappings` are arrays that hold the\n\t// parsed mapping coordinates from the source map's \"mappings\" attribute. They\n\t// are lazily instantiated, accessed via the `_generatedMappings` and\n\t// `_originalMappings` getters respectively, and we only parse the mappings\n\t// and create these arrays once queried for a source location. We jump through\n\t// these hoops because there can be many thousands of mappings, and parsing\n\t// them is expensive, so we only want to do it if we must.\n\t//\n\t// Each object in the arrays is of the form:\n\t//\n\t//     {\n\t//       generatedLine: The line number in the generated code,\n\t//       generatedColumn: The column number in the generated code,\n\t//       source: The path to the original source file that generated this\n\t//               chunk of code,\n\t//       originalLine: The line number in the original source that\n\t//                     corresponds to this chunk of generated code,\n\t//       originalColumn: The column number in the original source that\n\t//                       corresponds to this chunk of generated code,\n\t//       name: The name of the original symbol which generated this chunk of\n\t//             code.\n\t//     }\n\t//\n\t// All properties except for `generatedLine` and `generatedColumn` can be\n\t// `null`.\n\t//\n\t// `_generatedMappings` is ordered by the generated positions.\n\t//\n\t// `_originalMappings` is ordered by the original positions.\n\n\tSourceMapConsumer.prototype.__generatedMappings = null;\n\tObject.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {\n\t  get: function () {\n\t    if (!this.__generatedMappings) {\n\t      this._parseMappings(this._mappings, this.sourceRoot);\n\t    }\n\n\t    return this.__generatedMappings;\n\t  }\n\t});\n\n\tSourceMapConsumer.prototype.__originalMappings = null;\n\tObject.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {\n\t  get: function () {\n\t    if (!this.__originalMappings) {\n\t      this._parseMappings(this._mappings, this.sourceRoot);\n\t    }\n\n\t    return this.__originalMappings;\n\t  }\n\t});\n\n\tSourceMapConsumer.prototype._charIsMappingSeparator =\n\t  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n\t    var c = aStr.charAt(index);\n\t    return c === \";\" || c === \",\";\n\t  };\n\n\t/**\n\t * Parse the mappings in a string in to a data structure which we can easily\n\t * query (the ordered arrays in the `this.__generatedMappings` and\n\t * `this.__originalMappings` properties).\n\t */\n\tSourceMapConsumer.prototype._parseMappings =\n\t  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n\t    throw new Error(\"Subclasses must implement _parseMappings\");\n\t  };\n\n\tSourceMapConsumer.GENERATED_ORDER = 1;\n\tSourceMapConsumer.ORIGINAL_ORDER = 2;\n\n\tSourceMapConsumer.GREATEST_LOWER_BOUND = 1;\n\tSourceMapConsumer.LEAST_UPPER_BOUND = 2;\n\n\t/**\n\t * Iterate over each mapping between an original source/line/column and a\n\t * generated line/column in this source map.\n\t *\n\t * @param Function aCallback\n\t *        The function that is called with each mapping.\n\t * @param Object aContext\n\t *        Optional. If specified, this object will be the value of `this` every\n\t *        time that `aCallback` is called.\n\t * @param aOrder\n\t *        Either `SourceMapConsumer.GENERATED_ORDER` or\n\t *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n\t *        iterate over the mappings sorted by the generated file's line/column\n\t *        order or the original's source/line/column order, respectively. Defaults to\n\t *        `SourceMapConsumer.GENERATED_ORDER`.\n\t */\n\tSourceMapConsumer.prototype.eachMapping =\n\t  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n\t    var context = aContext || null;\n\t    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n\n\t    var mappings;\n\t    switch (order) {\n\t    case SourceMapConsumer.GENERATED_ORDER:\n\t      mappings = this._generatedMappings;\n\t      break;\n\t    case SourceMapConsumer.ORIGINAL_ORDER:\n\t      mappings = this._originalMappings;\n\t      break;\n\t    default:\n\t      throw new Error(\"Unknown order of iteration.\");\n\t    }\n\n\t    var sourceRoot = this.sourceRoot;\n\t    mappings.map(function (mapping) {\n\t      var source = mapping.source === null ? null : this._sources.at(mapping.source);\n\t      if (source != null && sourceRoot != null) {\n\t        source = util.join(sourceRoot, source);\n\t      }\n\t      return {\n\t        source: source,\n\t        generatedLine: mapping.generatedLine,\n\t        generatedColumn: mapping.generatedColumn,\n\t        originalLine: mapping.originalLine,\n\t        originalColumn: mapping.originalColumn,\n\t        name: mapping.name === null ? null : this._names.at(mapping.name)\n\t      };\n\t    }, this).forEach(aCallback, context);\n\t  };\n\n\t/**\n\t * Returns all generated line and column information for the original source,\n\t * line, and column provided. If no column is provided, returns all mappings\n\t * corresponding to a either the line we are searching for or the next\n\t * closest line that has any mappings. Otherwise, returns all mappings\n\t * corresponding to the given line and either the column we are searching for\n\t * or the next closest column that has any offsets.\n\t *\n\t * The only argument is an object with the following properties:\n\t *\n\t *   - source: The filename of the original source.\n\t *   - line: The line number in the original source.\n\t *   - column: Optional. the column number in the original source.\n\t *\n\t * and an array of objects is returned, each with the following properties:\n\t *\n\t *   - line: The line number in the generated source, or null.\n\t *   - column: The column number in the generated source, or null.\n\t */\n\tSourceMapConsumer.prototype.allGeneratedPositionsFor =\n\t  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n\t    var line = util.getArg(aArgs, 'line');\n\n\t    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n\t    // returns the index of the closest mapping less than the needle. By\n\t    // setting needle.originalColumn to 0, we thus find the last mapping for\n\t    // the given line, provided such a mapping exists.\n\t    var needle = {\n\t      source: util.getArg(aArgs, 'source'),\n\t      originalLine: line,\n\t      originalColumn: util.getArg(aArgs, 'column', 0)\n\t    };\n\n\t    if (this.sourceRoot != null) {\n\t      needle.source = util.relative(this.sourceRoot, needle.source);\n\t    }\n\t    if (!this._sources.has(needle.source)) {\n\t      return [];\n\t    }\n\t    needle.source = this._sources.indexOf(needle.source);\n\n\t    var mappings = [];\n\n\t    var index = this._findMapping(needle,\n\t                                  this._originalMappings,\n\t                                  \"originalLine\",\n\t                                  \"originalColumn\",\n\t                                  util.compareByOriginalPositions,\n\t                                  binarySearch.LEAST_UPPER_BOUND);\n\t    if (index >= 0) {\n\t      var mapping = this._originalMappings[index];\n\n\t      if (aArgs.column === undefined) {\n\t        var originalLine = mapping.originalLine;\n\n\t        // Iterate until either we run out of mappings, or we run into\n\t        // a mapping for a different line than the one we found. Since\n\t        // mappings are sorted, this is guaranteed to find all mappings for\n\t        // the line we found.\n\t        while (mapping && mapping.originalLine === originalLine) {\n\t          mappings.push({\n\t            line: util.getArg(mapping, 'generatedLine', null),\n\t            column: util.getArg(mapping, 'generatedColumn', null),\n\t            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n\t          });\n\n\t          mapping = this._originalMappings[++index];\n\t        }\n\t      } else {\n\t        var originalColumn = mapping.originalColumn;\n\n\t        // Iterate until either we run out of mappings, or we run into\n\t        // a mapping for a different line than the one we were searching for.\n\t        // Since mappings are sorted, this is guaranteed to find all mappings for\n\t        // the line we are searching for.\n\t        while (mapping &&\n\t               mapping.originalLine === line &&\n\t               mapping.originalColumn == originalColumn) {\n\t          mappings.push({\n\t            line: util.getArg(mapping, 'generatedLine', null),\n\t            column: util.getArg(mapping, 'generatedColumn', null),\n\t            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n\t          });\n\n\t          mapping = this._originalMappings[++index];\n\t        }\n\t      }\n\t    }\n\n\t    return mappings;\n\t  };\n\n\texports.SourceMapConsumer = SourceMapConsumer;\n\n\t/**\n\t * A BasicSourceMapConsumer instance represents a parsed source map which we can\n\t * query for information about the original file positions by giving it a file\n\t * position in the generated source.\n\t *\n\t * The only parameter is the raw source map (either as a JSON string, or\n\t * already parsed to an object). According to the spec, source maps have the\n\t * following attributes:\n\t *\n\t *   - version: Which version of the source map spec this map is following.\n\t *   - sources: An array of URLs to the original source files.\n\t *   - names: An array of identifiers which can be referrenced by individual mappings.\n\t *   - sourceRoot: Optional. The URL root from which all sources are relative.\n\t *   - sourcesContent: Optional. An array of contents of the original source files.\n\t *   - mappings: A string of base64 VLQs which contain the actual mappings.\n\t *   - file: Optional. The generated file this source map is associated with.\n\t *\n\t * Here is an example source map, taken from the source map spec[0]:\n\t *\n\t *     {\n\t *       version : 3,\n\t *       file: \"out.js\",\n\t *       sourceRoot : \"\",\n\t *       sources: [\"foo.js\", \"bar.js\"],\n\t *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n\t *       mappings: \"AA,AB;;ABCDE;\"\n\t *     }\n\t *\n\t * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n\t */\n\tfunction BasicSourceMapConsumer(aSourceMap) {\n\t  var sourceMap = aSourceMap;\n\t  if (typeof aSourceMap === 'string') {\n\t    sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n\t  }\n\n\t  var version = util.getArg(sourceMap, 'version');\n\t  var sources = util.getArg(sourceMap, 'sources');\n\t  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n\t  // requires the array) to play nice here.\n\t  var names = util.getArg(sourceMap, 'names', []);\n\t  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);\n\t  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);\n\t  var mappings = util.getArg(sourceMap, 'mappings');\n\t  var file = util.getArg(sourceMap, 'file', null);\n\n\t  // Once again, Sass deviates from the spec and supplies the version as a\n\t  // string rather than a number, so we use loose equality checking here.\n\t  if (version != this._version) {\n\t    throw new Error('Unsupported version: ' + version);\n\t  }\n\n\t  sources = sources\n\t    .map(String)\n\t    // Some source maps produce relative source paths like \"./foo.js\" instead of\n\t    // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n\t    // See bugzil.la/1090768.\n\t    .map(util.normalize)\n\t    // Always ensure that absolute sources are internally stored relative to\n\t    // the source root, if the source root is absolute. Not doing this would\n\t    // be particularly problematic when the source root is a prefix of the\n\t    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.\n\t    .map(function (source) {\n\t      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)\n\t        ? util.relative(sourceRoot, source)\n\t        : source;\n\t    });\n\n\t  // Pass `true` below to allow duplicate names and sources. While source maps\n\t  // are intended to be compressed and deduplicated, the TypeScript compiler\n\t  // sometimes generates source maps with duplicates in them. See Github issue\n\t  // #72 and bugzil.la/889492.\n\t  this._names = ArraySet.fromArray(names.map(String), true);\n\t  this._sources = ArraySet.fromArray(sources, true);\n\n\t  this.sourceRoot = sourceRoot;\n\t  this.sourcesContent = sourcesContent;\n\t  this._mappings = mappings;\n\t  this.file = file;\n\t}\n\n\tBasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\n\tBasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\n\n\t/**\n\t * Create a BasicSourceMapConsumer from a SourceMapGenerator.\n\t *\n\t * @param SourceMapGenerator aSourceMap\n\t *        The source map that will be consumed.\n\t * @returns BasicSourceMapConsumer\n\t */\n\tBasicSourceMapConsumer.fromSourceMap =\n\t  function SourceMapConsumer_fromSourceMap(aSourceMap) {\n\t    var smc = Object.create(BasicSourceMapConsumer.prototype);\n\n\t    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n\t    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n\t    smc.sourceRoot = aSourceMap._sourceRoot;\n\t    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),\n\t                                                            smc.sourceRoot);\n\t    smc.file = aSourceMap._file;\n\n\t    // Because we are modifying the entries (by converting string sources and\n\t    // names to indices into the sources and names ArraySets), we have to make\n\t    // a copy of the entry or else bad things happen. Shared mutable state\n\t    // strikes again! See github issue #191.\n\n\t    var generatedMappings = aSourceMap._mappings.toArray().slice();\n\t    var destGeneratedMappings = smc.__generatedMappings = [];\n\t    var destOriginalMappings = smc.__originalMappings = [];\n\n\t    for (var i = 0, length = generatedMappings.length; i < length; i++) {\n\t      var srcMapping = generatedMappings[i];\n\t      var destMapping = new Mapping;\n\t      destMapping.generatedLine = srcMapping.generatedLine;\n\t      destMapping.generatedColumn = srcMapping.generatedColumn;\n\n\t      if (srcMapping.source) {\n\t        destMapping.source = sources.indexOf(srcMapping.source);\n\t        destMapping.originalLine = srcMapping.originalLine;\n\t        destMapping.originalColumn = srcMapping.originalColumn;\n\n\t        if (srcMapping.name) {\n\t          destMapping.name = names.indexOf(srcMapping.name);\n\t        }\n\n\t        destOriginalMappings.push(destMapping);\n\t      }\n\n\t      destGeneratedMappings.push(destMapping);\n\t    }\n\n\t    quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n\n\t    return smc;\n\t  };\n\n\t/**\n\t * The version of the source mapping spec that we are consuming.\n\t */\n\tBasicSourceMapConsumer.prototype._version = 3;\n\n\t/**\n\t * The list of original sources.\n\t */\n\tObject.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {\n\t  get: function () {\n\t    return this._sources.toArray().map(function (s) {\n\t      return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;\n\t    }, this);\n\t  }\n\t});\n\n\t/**\n\t * Provide the JIT with a nice shape / hidden class.\n\t */\n\tfunction Mapping() {\n\t  this.generatedLine = 0;\n\t  this.generatedColumn = 0;\n\t  this.source = null;\n\t  this.originalLine = null;\n\t  this.originalColumn = null;\n\t  this.name = null;\n\t}\n\n\t/**\n\t * Parse the mappings in a string in to a data structure which we can easily\n\t * query (the ordered arrays in the `this.__generatedMappings` and\n\t * `this.__originalMappings` properties).\n\t */\n\tBasicSourceMapConsumer.prototype._parseMappings =\n\t  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n\t    var generatedLine = 1;\n\t    var previousGeneratedColumn = 0;\n\t    var previousOriginalLine = 0;\n\t    var previousOriginalColumn = 0;\n\t    var previousSource = 0;\n\t    var previousName = 0;\n\t    var length = aStr.length;\n\t    var index = 0;\n\t    var cachedSegments = {};\n\t    var temp = {};\n\t    var originalMappings = [];\n\t    var generatedMappings = [];\n\t    var mapping, str, segment, end, value;\n\n\t    while (index < length) {\n\t      if (aStr.charAt(index) === ';') {\n\t        generatedLine++;\n\t        index++;\n\t        previousGeneratedColumn = 0;\n\t      }\n\t      else if (aStr.charAt(index) === ',') {\n\t        index++;\n\t      }\n\t      else {\n\t        mapping = new Mapping();\n\t        mapping.generatedLine = generatedLine;\n\n\t        // Because each offset is encoded relative to the previous one,\n\t        // many segments often have the same encoding. We can exploit this\n\t        // fact by caching the parsed variable length fields of each segment,\n\t        // allowing us to avoid a second parse if we encounter the same\n\t        // segment again.\n\t        for (end = index; end < length; end++) {\n\t          if (this._charIsMappingSeparator(aStr, end)) {\n\t            break;\n\t          }\n\t        }\n\t        str = aStr.slice(index, end);\n\n\t        segment = cachedSegments[str];\n\t        if (segment) {\n\t          index += str.length;\n\t        } else {\n\t          segment = [];\n\t          while (index < end) {\n\t            base64VLQ.decode(aStr, index, temp);\n\t            value = temp.value;\n\t            index = temp.rest;\n\t            segment.push(value);\n\t          }\n\n\t          if (segment.length === 2) {\n\t            throw new Error('Found a source, but no line and column');\n\t          }\n\n\t          if (segment.length === 3) {\n\t            throw new Error('Found a source and line, but no column');\n\t          }\n\n\t          cachedSegments[str] = segment;\n\t        }\n\n\t        // Generated column.\n\t        mapping.generatedColumn = previousGeneratedColumn + segment[0];\n\t        previousGeneratedColumn = mapping.generatedColumn;\n\n\t        if (segment.length > 1) {\n\t          // Original source.\n\t          mapping.source = previousSource + segment[1];\n\t          previousSource += segment[1];\n\n\t          // Original line.\n\t          mapping.originalLine = previousOriginalLine + segment[2];\n\t          previousOriginalLine = mapping.originalLine;\n\t          // Lines are stored 0-based\n\t          mapping.originalLine += 1;\n\n\t          // Original column.\n\t          mapping.originalColumn = previousOriginalColumn + segment[3];\n\t          previousOriginalColumn = mapping.originalColumn;\n\n\t          if (segment.length > 4) {\n\t            // Original name.\n\t            mapping.name = previousName + segment[4];\n\t            previousName += segment[4];\n\t          }\n\t        }\n\n\t        generatedMappings.push(mapping);\n\t        if (typeof mapping.originalLine === 'number') {\n\t          originalMappings.push(mapping);\n\t        }\n\t      }\n\t    }\n\n\t    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n\t    this.__generatedMappings = generatedMappings;\n\n\t    quickSort(originalMappings, util.compareByOriginalPositions);\n\t    this.__originalMappings = originalMappings;\n\t  };\n\n\t/**\n\t * Find the mapping that best matches the hypothetical \"needle\" mapping that\n\t * we are searching for in the given \"haystack\" of mappings.\n\t */\n\tBasicSourceMapConsumer.prototype._findMapping =\n\t  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,\n\t                                         aColumnName, aComparator, aBias) {\n\t    // To return the position we are searching for, we must first find the\n\t    // mapping for the given position and then return the opposite position it\n\t    // points to. Because the mappings are sorted, we can use binary search to\n\t    // find the best mapping.\n\n\t    if (aNeedle[aLineName] <= 0) {\n\t      throw new TypeError('Line must be greater than or equal to 1, got '\n\t                          + aNeedle[aLineName]);\n\t    }\n\t    if (aNeedle[aColumnName] < 0) {\n\t      throw new TypeError('Column must be greater than or equal to 0, got '\n\t                          + aNeedle[aColumnName]);\n\t    }\n\n\t    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n\t  };\n\n\t/**\n\t * Compute the last column for each generated mapping. The last column is\n\t * inclusive.\n\t */\n\tBasicSourceMapConsumer.prototype.computeColumnSpans =\n\t  function SourceMapConsumer_computeColumnSpans() {\n\t    for (var index = 0; index < this._generatedMappings.length; ++index) {\n\t      var mapping = this._generatedMappings[index];\n\n\t      // Mappings do not contain a field for the last generated columnt. We\n\t      // can come up with an optimistic estimate, however, by assuming that\n\t      // mappings are contiguous (i.e. given two consecutive mappings, the\n\t      // first mapping ends where the second one starts).\n\t      if (index + 1 < this._generatedMappings.length) {\n\t        var nextMapping = this._generatedMappings[index + 1];\n\n\t        if (mapping.generatedLine === nextMapping.generatedLine) {\n\t          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n\t          continue;\n\t        }\n\t      }\n\n\t      // The last mapping for each line spans the entire line.\n\t      mapping.lastGeneratedColumn = Infinity;\n\t    }\n\t  };\n\n\t/**\n\t * Returns the original source, line, and column information for the generated\n\t * source's line and column positions provided. The only argument is an object\n\t * with the following properties:\n\t *\n\t *   - line: The line number in the generated source.\n\t *   - column: The column number in the generated source.\n\t *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n\t *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n\t *     closest element that is smaller than or greater than the one we are\n\t *     searching for, respectively, if the exact element cannot be found.\n\t *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n\t *\n\t * and an object is returned with the following properties:\n\t *\n\t *   - source: The original source file, or null.\n\t *   - line: The line number in the original source, or null.\n\t *   - column: The column number in the original source, or null.\n\t *   - name: The original identifier, or null.\n\t */\n\tBasicSourceMapConsumer.prototype.originalPositionFor =\n\t  function SourceMapConsumer_originalPositionFor(aArgs) {\n\t    var needle = {\n\t      generatedLine: util.getArg(aArgs, 'line'),\n\t      generatedColumn: util.getArg(aArgs, 'column')\n\t    };\n\n\t    var index = this._findMapping(\n\t      needle,\n\t      this._generatedMappings,\n\t      \"generatedLine\",\n\t      \"generatedColumn\",\n\t      util.compareByGeneratedPositionsDeflated,\n\t      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n\t    );\n\n\t    if (index >= 0) {\n\t      var mapping = this._generatedMappings[index];\n\n\t      if (mapping.generatedLine === needle.generatedLine) {\n\t        var source = util.getArg(mapping, 'source', null);\n\t        if (source !== null) {\n\t          source = this._sources.at(source);\n\t          if (this.sourceRoot != null) {\n\t            source = util.join(this.sourceRoot, source);\n\t          }\n\t        }\n\t        var name = util.getArg(mapping, 'name', null);\n\t        if (name !== null) {\n\t          name = this._names.at(name);\n\t        }\n\t        return {\n\t          source: source,\n\t          line: util.getArg(mapping, 'originalLine', null),\n\t          column: util.getArg(mapping, 'originalColumn', null),\n\t          name: name\n\t        };\n\t      }\n\t    }\n\n\t    return {\n\t      source: null,\n\t      line: null,\n\t      column: null,\n\t      name: null\n\t    };\n\t  };\n\n\t/**\n\t * Return true if we have the source content for every source in the source\n\t * map, false otherwise.\n\t */\n\tBasicSourceMapConsumer.prototype.hasContentsOfAllSources =\n\t  function BasicSourceMapConsumer_hasContentsOfAllSources() {\n\t    if (!this.sourcesContent) {\n\t      return false;\n\t    }\n\t    return this.sourcesContent.length >= this._sources.size() &&\n\t      !this.sourcesContent.some(function (sc) { return sc == null; });\n\t  };\n\n\t/**\n\t * Returns the original source content. The only argument is the url of the\n\t * original source file. Returns null if no original source content is\n\t * available.\n\t */\n\tBasicSourceMapConsumer.prototype.sourceContentFor =\n\t  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n\t    if (!this.sourcesContent) {\n\t      return null;\n\t    }\n\n\t    if (this.sourceRoot != null) {\n\t      aSource = util.relative(this.sourceRoot, aSource);\n\t    }\n\n\t    if (this._sources.has(aSource)) {\n\t      return this.sourcesContent[this._sources.indexOf(aSource)];\n\t    }\n\n\t    var url;\n\t    if (this.sourceRoot != null\n\t        && (url = util.urlParse(this.sourceRoot))) {\n\t      // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n\t      // many users. We can help them out when they expect file:// URIs to\n\t      // behave like it would if they were running a local HTTP server. See\n\t      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n\t      var fileUriAbsPath = aSource.replace(/^file:\\/\\//, \"\");\n\t      if (url.scheme == \"file\"\n\t          && this._sources.has(fileUriAbsPath)) {\n\t        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]\n\t      }\n\n\t      if ((!url.path || url.path == \"/\")\n\t          && this._sources.has(\"/\" + aSource)) {\n\t        return this.sourcesContent[this._sources.indexOf(\"/\" + aSource)];\n\t      }\n\t    }\n\n\t    // This function is used recursively from\n\t    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n\t    // don't want to throw if we can't find the source - we just want to\n\t    // return null, so we provide a flag to exit gracefully.\n\t    if (nullOnMissing) {\n\t      return null;\n\t    }\n\t    else {\n\t      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n\t    }\n\t  };\n\n\t/**\n\t * Returns the generated line and column information for the original source,\n\t * line, and column positions provided. The only argument is an object with\n\t * the following properties:\n\t *\n\t *   - source: The filename of the original source.\n\t *   - line: The line number in the original source.\n\t *   - column: The column number in the original source.\n\t *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n\t *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n\t *     closest element that is smaller than or greater than the one we are\n\t *     searching for, respectively, if the exact element cannot be found.\n\t *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n\t *\n\t * and an object is returned with the following properties:\n\t *\n\t *   - line: The line number in the generated source, or null.\n\t *   - column: The column number in the generated source, or null.\n\t */\n\tBasicSourceMapConsumer.prototype.generatedPositionFor =\n\t  function SourceMapConsumer_generatedPositionFor(aArgs) {\n\t    var source = util.getArg(aArgs, 'source');\n\t    if (this.sourceRoot != null) {\n\t      source = util.relative(this.sourceRoot, source);\n\t    }\n\t    if (!this._sources.has(source)) {\n\t      return {\n\t        line: null,\n\t        column: null,\n\t        lastColumn: null\n\t      };\n\t    }\n\t    source = this._sources.indexOf(source);\n\n\t    var needle = {\n\t      source: source,\n\t      originalLine: util.getArg(aArgs, 'line'),\n\t      originalColumn: util.getArg(aArgs, 'column')\n\t    };\n\n\t    var index = this._findMapping(\n\t      needle,\n\t      this._originalMappings,\n\t      \"originalLine\",\n\t      \"originalColumn\",\n\t      util.compareByOriginalPositions,\n\t      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n\t    );\n\n\t    if (index >= 0) {\n\t      var mapping = this._originalMappings[index];\n\n\t      if (mapping.source === needle.source) {\n\t        return {\n\t          line: util.getArg(mapping, 'generatedLine', null),\n\t          column: util.getArg(mapping, 'generatedColumn', null),\n\t          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n\t        };\n\t      }\n\t    }\n\n\t    return {\n\t      line: null,\n\t      column: null,\n\t      lastColumn: null\n\t    };\n\t  };\n\n\texports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n\n\t/**\n\t * An IndexedSourceMapConsumer instance represents a parsed source map which\n\t * we can query for information. It differs from BasicSourceMapConsumer in\n\t * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\n\t * input.\n\t *\n\t * The only parameter is a raw source map (either as a JSON string, or already\n\t * parsed to an object). According to the spec for indexed source maps, they\n\t * have the following attributes:\n\t *\n\t *   - version: Which version of the source map spec this map is following.\n\t *   - file: Optional. The generated file this source map is associated with.\n\t *   - sections: A list of section definitions.\n\t *\n\t * Each value under the \"sections\" field has two fields:\n\t *   - offset: The offset into the original specified at which this section\n\t *       begins to apply, defined as an object with a \"line\" and \"column\"\n\t *       field.\n\t *   - map: A source map definition. This source map could also be indexed,\n\t *       but doesn't have to be.\n\t *\n\t * Instead of the \"map\" field, it's also possible to have a \"url\" field\n\t * specifying a URL to retrieve a source map from, but that's currently\n\t * unsupported.\n\t *\n\t * Here's an example source map, taken from the source map spec[0], but\n\t * modified to omit a section which uses the \"url\" field.\n\t *\n\t *  {\n\t *    version : 3,\n\t *    file: \"app.js\",\n\t *    sections: [{\n\t *      offset: {line:100, column:10},\n\t *      map: {\n\t *        version : 3,\n\t *        file: \"section.js\",\n\t *        sources: [\"foo.js\", \"bar.js\"],\n\t *        names: [\"src\", \"maps\", \"are\", \"fun\"],\n\t *        mappings: \"AAAA,E;;ABCDE;\"\n\t *      }\n\t *    }],\n\t *  }\n\t *\n\t * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\n\t */\n\tfunction IndexedSourceMapConsumer(aSourceMap) {\n\t  var sourceMap = aSourceMap;\n\t  if (typeof aSourceMap === 'string') {\n\t    sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n\t  }\n\n\t  var version = util.getArg(sourceMap, 'version');\n\t  var sections = util.getArg(sourceMap, 'sections');\n\n\t  if (version != this._version) {\n\t    throw new Error('Unsupported version: ' + version);\n\t  }\n\n\t  this._sources = new ArraySet();\n\t  this._names = new ArraySet();\n\n\t  var lastOffset = {\n\t    line: -1,\n\t    column: 0\n\t  };\n\t  this._sections = sections.map(function (s) {\n\t    if (s.url) {\n\t      // The url field will require support for asynchronicity.\n\t      // See https://github.com/mozilla/source-map/issues/16\n\t      throw new Error('Support for url field in sections not implemented.');\n\t    }\n\t    var offset = util.getArg(s, 'offset');\n\t    var offsetLine = util.getArg(offset, 'line');\n\t    var offsetColumn = util.getArg(offset, 'column');\n\n\t    if (offsetLine < lastOffset.line ||\n\t        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {\n\t      throw new Error('Section offsets must be ordered and non-overlapping.');\n\t    }\n\t    lastOffset = offset;\n\n\t    return {\n\t      generatedOffset: {\n\t        // The offset fields are 0-based, but we use 1-based indices when\n\t        // encoding/decoding from VLQ.\n\t        generatedLine: offsetLine + 1,\n\t        generatedColumn: offsetColumn + 1\n\t      },\n\t      consumer: new SourceMapConsumer(util.getArg(s, 'map'))\n\t    }\n\t  });\n\t}\n\n\tIndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\n\tIndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;\n\n\t/**\n\t * The version of the source mapping spec that we are consuming.\n\t */\n\tIndexedSourceMapConsumer.prototype._version = 3;\n\n\t/**\n\t * The list of original sources.\n\t */\n\tObject.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {\n\t  get: function () {\n\t    var sources = [];\n\t    for (var i = 0; i < this._sections.length; i++) {\n\t      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n\t        sources.push(this._sections[i].consumer.sources[j]);\n\t      }\n\t    }\n\t    return sources;\n\t  }\n\t});\n\n\t/**\n\t * Returns the original source, line, and column information for the generated\n\t * source's line and column positions provided. The only argument is an object\n\t * with the following properties:\n\t *\n\t *   - line: The line number in the generated source.\n\t *   - column: The column number in the generated source.\n\t *\n\t * and an object is returned with the following properties:\n\t *\n\t *   - source: The original source file, or null.\n\t *   - line: The line number in the original source, or null.\n\t *   - column: The column number in the original source, or null.\n\t *   - name: The original identifier, or null.\n\t */\n\tIndexedSourceMapConsumer.prototype.originalPositionFor =\n\t  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n\t    var needle = {\n\t      generatedLine: util.getArg(aArgs, 'line'),\n\t      generatedColumn: util.getArg(aArgs, 'column')\n\t    };\n\n\t    // Find the section containing the generated position we're trying to map\n\t    // to an original position.\n\t    var sectionIndex = binarySearch.search(needle, this._sections,\n\t      function(needle, section) {\n\t        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;\n\t        if (cmp) {\n\t          return cmp;\n\t        }\n\n\t        return (needle.generatedColumn -\n\t                section.generatedOffset.generatedColumn);\n\t      });\n\t    var section = this._sections[sectionIndex];\n\n\t    if (!section) {\n\t      return {\n\t        source: null,\n\t        line: null,\n\t        column: null,\n\t        name: null\n\t      };\n\t    }\n\n\t    return section.consumer.originalPositionFor({\n\t      line: needle.generatedLine -\n\t        (section.generatedOffset.generatedLine - 1),\n\t      column: needle.generatedColumn -\n\t        (section.generatedOffset.generatedLine === needle.generatedLine\n\t         ? section.generatedOffset.generatedColumn - 1\n\t         : 0),\n\t      bias: aArgs.bias\n\t    });\n\t  };\n\n\t/**\n\t * Return true if we have the source content for every source in the source\n\t * map, false otherwise.\n\t */\n\tIndexedSourceMapConsumer.prototype.hasContentsOfAllSources =\n\t  function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n\t    return this._sections.every(function (s) {\n\t      return s.consumer.hasContentsOfAllSources();\n\t    });\n\t  };\n\n\t/**\n\t * Returns the original source content. The only argument is the url of the\n\t * original source file. Returns null if no original source content is\n\t * available.\n\t */\n\tIndexedSourceMapConsumer.prototype.sourceContentFor =\n\t  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n\t    for (var i = 0; i < this._sections.length; i++) {\n\t      var section = this._sections[i];\n\n\t      var content = section.consumer.sourceContentFor(aSource, true);\n\t      if (content) {\n\t        return content;\n\t      }\n\t    }\n\t    if (nullOnMissing) {\n\t      return null;\n\t    }\n\t    else {\n\t      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n\t    }\n\t  };\n\n\t/**\n\t * Returns the generated line and column information for the original source,\n\t * line, and column positions provided. The only argument is an object with\n\t * the following properties:\n\t *\n\t *   - source: The filename of the original source.\n\t *   - line: The line number in the original source.\n\t *   - column: The column number in the original source.\n\t *\n\t * and an object is returned with the following properties:\n\t *\n\t *   - line: The line number in the generated source, or null.\n\t *   - column: The column number in the generated source, or null.\n\t */\n\tIndexedSourceMapConsumer.prototype.generatedPositionFor =\n\t  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n\t    for (var i = 0; i < this._sections.length; i++) {\n\t      var section = this._sections[i];\n\n\t      // Only consider this section if the requested source is in the list of\n\t      // sources of the consumer.\n\t      if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {\n\t        continue;\n\t      }\n\t      var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n\t      if (generatedPosition) {\n\t        var ret = {\n\t          line: generatedPosition.line +\n\t            (section.generatedOffset.generatedLine - 1),\n\t          column: generatedPosition.column +\n\t            (section.generatedOffset.generatedLine === generatedPosition.line\n\t             ? section.generatedOffset.generatedColumn - 1\n\t             : 0)\n\t        };\n\t        return ret;\n\t      }\n\t    }\n\n\t    return {\n\t      line: null,\n\t      column: null\n\t    };\n\t  };\n\n\t/**\n\t * Parse the mappings in a string in to a data structure which we can easily\n\t * query (the ordered arrays in the `this.__generatedMappings` and\n\t * `this.__originalMappings` properties).\n\t */\n\tIndexedSourceMapConsumer.prototype._parseMappings =\n\t  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n\t    this.__generatedMappings = [];\n\t    this.__originalMappings = [];\n\t    for (var i = 0; i < this._sections.length; i++) {\n\t      var section = this._sections[i];\n\t      var sectionMappings = section.consumer._generatedMappings;\n\t      for (var j = 0; j < sectionMappings.length; j++) {\n\t        var mapping = sectionMappings[j];\n\n\t        var source = section.consumer._sources.at(mapping.source);\n\t        if (section.consumer.sourceRoot !== null) {\n\t          source = util.join(section.consumer.sourceRoot, source);\n\t        }\n\t        this._sources.add(source);\n\t        source = this._sources.indexOf(source);\n\n\t        var name = section.consumer._names.at(mapping.name);\n\t        this._names.add(name);\n\t        name = this._names.indexOf(name);\n\n\t        // The mappings coming from the consumer for the section have\n\t        // generated positions relative to the start of the section, so we\n\t        // need to offset them to be relative to the start of the concatenated\n\t        // generated file.\n\t        var adjustedMapping = {\n\t          source: source,\n\t          generatedLine: mapping.generatedLine +\n\t            (section.generatedOffset.generatedLine - 1),\n\t          generatedColumn: mapping.generatedColumn +\n\t            (section.generatedOffset.generatedLine === mapping.generatedLine\n\t            ? section.generatedOffset.generatedColumn - 1\n\t            : 0),\n\t          originalLine: mapping.originalLine,\n\t          originalColumn: mapping.originalColumn,\n\t          name: name\n\t        };\n\n\t        this.__generatedMappings.push(adjustedMapping);\n\t        if (typeof adjustedMapping.originalLine === 'number') {\n\t          this.__originalMappings.push(adjustedMapping);\n\t        }\n\t      }\n\t    }\n\n\t    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n\t    quickSort(this.__originalMappings, util.compareByOriginalPositions);\n\t  };\n\n\texports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t/* -*- Mode: js; js-indent-level: 2; -*- */\n\t/*\n\t * Copyright 2011 Mozilla Foundation and contributors\n\t * Licensed under the New BSD license. See LICENSE or:\n\t * http://opensource.org/licenses/BSD-3-Clause\n\t */\n\n\t/**\n\t * This is a helper function for getting values from parameter/options\n\t * objects.\n\t *\n\t * @param args The object we are extracting values from\n\t * @param name The name of the property we are getting.\n\t * @param defaultValue An optional value to return if the property is missing\n\t * from the object. If this is not specified and the property is missing, an\n\t * error will be thrown.\n\t */\n\tfunction getArg(aArgs, aName, aDefaultValue) {\n\t  if (aName in aArgs) {\n\t    return aArgs[aName];\n\t  } else if (arguments.length === 3) {\n\t    return aDefaultValue;\n\t  } else {\n\t    throw new Error('\"' + aName + '\" is a required argument.');\n\t  }\n\t}\n\texports.getArg = getArg;\n\n\tvar urlRegexp = /^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.]*)(?::(\\d+))?(\\S*)$/;\n\tvar dataUrlRegexp = /^data:.+\\,.+$/;\n\n\tfunction urlParse(aUrl) {\n\t  var match = aUrl.match(urlRegexp);\n\t  if (!match) {\n\t    return null;\n\t  }\n\t  return {\n\t    scheme: match[1],\n\t    auth: match[2],\n\t    host: match[3],\n\t    port: match[4],\n\t    path: match[5]\n\t  };\n\t}\n\texports.urlParse = urlParse;\n\n\tfunction urlGenerate(aParsedUrl) {\n\t  var url = '';\n\t  if (aParsedUrl.scheme) {\n\t    url += aParsedUrl.scheme + ':';\n\t  }\n\t  url += '//';\n\t  if (aParsedUrl.auth) {\n\t    url += aParsedUrl.auth + '@';\n\t  }\n\t  if (aParsedUrl.host) {\n\t    url += aParsedUrl.host;\n\t  }\n\t  if (aParsedUrl.port) {\n\t    url += \":\" + aParsedUrl.port\n\t  }\n\t  if (aParsedUrl.path) {\n\t    url += aParsedUrl.path;\n\t  }\n\t  return url;\n\t}\n\texports.urlGenerate = urlGenerate;\n\n\t/**\n\t * Normalizes a path, or the path portion of a URL:\n\t *\n\t * - Replaces consecutive slashes with one slash.\n\t * - Removes unnecessary '.' parts.\n\t * - Removes unnecessary '<dir>/..' parts.\n\t *\n\t * Based on code in the Node.js 'path' core module.\n\t *\n\t * @param aPath The path or url to normalize.\n\t */\n\tfunction normalize(aPath) {\n\t  var path = aPath;\n\t  var url = urlParse(aPath);\n\t  if (url) {\n\t    if (!url.path) {\n\t      return aPath;\n\t    }\n\t    path = url.path;\n\t  }\n\t  var isAbsolute = exports.isAbsolute(path);\n\n\t  var parts = path.split(/\\/+/);\n\t  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {\n\t    part = parts[i];\n\t    if (part === '.') {\n\t      parts.splice(i, 1);\n\t    } else if (part === '..') {\n\t      up++;\n\t    } else if (up > 0) {\n\t      if (part === '') {\n\t        // The first part is blank if the path is absolute. Trying to go\n\t        // above the root is a no-op. Therefore we can remove all '..' parts\n\t        // directly after the root.\n\t        parts.splice(i + 1, up);\n\t        up = 0;\n\t      } else {\n\t        parts.splice(i, 2);\n\t        up--;\n\t      }\n\t    }\n\t  }\n\t  path = parts.join('/');\n\n\t  if (path === '') {\n\t    path = isAbsolute ? '/' : '.';\n\t  }\n\n\t  if (url) {\n\t    url.path = path;\n\t    return urlGenerate(url);\n\t  }\n\t  return path;\n\t}\n\texports.normalize = normalize;\n\n\t/**\n\t * Joins two paths/URLs.\n\t *\n\t * @param aRoot The root path or URL.\n\t * @param aPath The path or URL to be joined with the root.\n\t *\n\t * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a\n\t *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended\n\t *   first.\n\t * - Otherwise aPath is a path. If aRoot is a URL, then its path portion\n\t *   is updated with the result and aRoot is returned. Otherwise the result\n\t *   is returned.\n\t *   - If aPath is absolute, the result is aPath.\n\t *   - Otherwise the two paths are joined with a slash.\n\t * - Joining for example 'http://' and 'www.example.com' is also supported.\n\t */\n\tfunction join(aRoot, aPath) {\n\t  if (aRoot === \"\") {\n\t    aRoot = \".\";\n\t  }\n\t  if (aPath === \"\") {\n\t    aPath = \".\";\n\t  }\n\t  var aPathUrl = urlParse(aPath);\n\t  var aRootUrl = urlParse(aRoot);\n\t  if (aRootUrl) {\n\t    aRoot = aRootUrl.path || '/';\n\t  }\n\n\t  // `join(foo, '//www.example.org')`\n\t  if (aPathUrl && !aPathUrl.scheme) {\n\t    if (aRootUrl) {\n\t      aPathUrl.scheme = aRootUrl.scheme;\n\t    }\n\t    return urlGenerate(aPathUrl);\n\t  }\n\n\t  if (aPathUrl || aPath.match(dataUrlRegexp)) {\n\t    return aPath;\n\t  }\n\n\t  // `join('http://', 'www.example.com')`\n\t  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {\n\t    aRootUrl.host = aPath;\n\t    return urlGenerate(aRootUrl);\n\t  }\n\n\t  var joined = aPath.charAt(0) === '/'\n\t    ? aPath\n\t    : normalize(aRoot.replace(/\\/+$/, '') + '/' + aPath);\n\n\t  if (aRootUrl) {\n\t    aRootUrl.path = joined;\n\t    return urlGenerate(aRootUrl);\n\t  }\n\t  return joined;\n\t}\n\texports.join = join;\n\n\texports.isAbsolute = function (aPath) {\n\t  return aPath.charAt(0) === '/' || !!aPath.match(urlRegexp);\n\t};\n\n\t/**\n\t * Make a path relative to a URL or another path.\n\t *\n\t * @param aRoot The root path or URL.\n\t * @param aPath The path or URL to be made relative to aRoot.\n\t */\n\tfunction relative(aRoot, aPath) {\n\t  if (aRoot === \"\") {\n\t    aRoot = \".\";\n\t  }\n\n\t  aRoot = aRoot.replace(/\\/$/, '');\n\n\t  // It is possible for the path to be above the root. In this case, simply\n\t  // checking whether the root is a prefix of the path won't work. Instead, we\n\t  // need to remove components from the root one by one, until either we find\n\t  // a prefix that fits, or we run out of components to remove.\n\t  var level = 0;\n\t  while (aPath.indexOf(aRoot + '/') !== 0) {\n\t    var index = aRoot.lastIndexOf(\"/\");\n\t    if (index < 0) {\n\t      return aPath;\n\t    }\n\n\t    // If the only part of the root that is left is the scheme (i.e. http://,\n\t    // file:///, etc.), one or more slashes (/), or simply nothing at all, we\n\t    // have exhausted all components, so the path is not relative to the root.\n\t    aRoot = aRoot.slice(0, index);\n\t    if (aRoot.match(/^([^\\/]+:\\/)?\\/*$/)) {\n\t      return aPath;\n\t    }\n\n\t    ++level;\n\t  }\n\n\t  // Make sure we add a \"../\" for each component we removed from the root.\n\t  return Array(level + 1).join(\"../\") + aPath.substr(aRoot.length + 1);\n\t}\n\texports.relative = relative;\n\n\tvar supportsNullProto = (function () {\n\t  var obj = Object.create(null);\n\t  return !('__proto__' in obj);\n\t}());\n\n\tfunction identity (s) {\n\t  return s;\n\t}\n\n\t/**\n\t * Because behavior goes wacky when you set `__proto__` on objects, we\n\t * have to prefix all the strings in our set with an arbitrary character.\n\t *\n\t * See https://github.com/mozilla/source-map/pull/31 and\n\t * https://github.com/mozilla/source-map/issues/30\n\t *\n\t * @param String aStr\n\t */\n\tfunction toSetString(aStr) {\n\t  if (isProtoString(aStr)) {\n\t    return '$' + aStr;\n\t  }\n\n\t  return aStr;\n\t}\n\texports.toSetString = supportsNullProto ? identity : toSetString;\n\n\tfunction fromSetString(aStr) {\n\t  if (isProtoString(aStr)) {\n\t    return aStr.slice(1);\n\t  }\n\n\t  return aStr;\n\t}\n\texports.fromSetString = supportsNullProto ? identity : fromSetString;\n\n\tfunction isProtoString(s) {\n\t  if (!s) {\n\t    return false;\n\t  }\n\n\t  var length = s.length;\n\n\t  if (length < 9 /* \"__proto__\".length */) {\n\t    return false;\n\t  }\n\n\t  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||\n\t      s.charCodeAt(length - 2) !== 95  /* '_' */ ||\n\t      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||\n\t      s.charCodeAt(length - 4) !== 116 /* 't' */ ||\n\t      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||\n\t      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||\n\t      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||\n\t      s.charCodeAt(length - 8) !== 95  /* '_' */ ||\n\t      s.charCodeAt(length - 9) !== 95  /* '_' */) {\n\t    return false;\n\t  }\n\n\t  for (var i = length - 10; i >= 0; i--) {\n\t    if (s.charCodeAt(i) !== 36 /* '$' */) {\n\t      return false;\n\t    }\n\t  }\n\n\t  return true;\n\t}\n\n\t/**\n\t * Comparator between two mappings where the original positions are compared.\n\t *\n\t * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n\t * mappings with the same original source/line/column, but different generated\n\t * line and column the same. Useful when searching for a mapping with a\n\t * stubbed out mapping.\n\t */\n\tfunction compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {\n\t  var cmp = mappingA.source - mappingB.source;\n\t  if (cmp !== 0) {\n\t    return cmp;\n\t  }\n\n\t  cmp = mappingA.originalLine - mappingB.originalLine;\n\t  if (cmp !== 0) {\n\t    return cmp;\n\t  }\n\n\t  cmp = mappingA.originalColumn - mappingB.originalColumn;\n\t  if (cmp !== 0 || onlyCompareOriginal) {\n\t    return cmp;\n\t  }\n\n\t  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n\t  if (cmp !== 0) {\n\t    return cmp;\n\t  }\n\n\t  cmp = mappingA.generatedLine - mappingB.generatedLine;\n\t  if (cmp !== 0) {\n\t    return cmp;\n\t  }\n\n\t  return mappingA.name - mappingB.name;\n\t}\n\texports.compareByOriginalPositions = compareByOriginalPositions;\n\n\t/**\n\t * Comparator between two mappings with deflated source and name indices where\n\t * the generated positions are compared.\n\t *\n\t * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n\t * mappings with the same generated line and column, but different\n\t * source/name/original line and column the same. Useful when searching for a\n\t * mapping with a stubbed out mapping.\n\t */\n\tfunction compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {\n\t  var cmp = mappingA.generatedLine - mappingB.generatedLine;\n\t  if (cmp !== 0) {\n\t    return cmp;\n\t  }\n\n\t  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n\t  if (cmp !== 0 || onlyCompareGenerated) {\n\t    return cmp;\n\t  }\n\n\t  cmp = mappingA.source - mappingB.source;\n\t  if (cmp !== 0) {\n\t    return cmp;\n\t  }\n\n\t  cmp = mappingA.originalLine - mappingB.originalLine;\n\t  if (cmp !== 0) {\n\t    return cmp;\n\t  }\n\n\t  cmp = mappingA.originalColumn - mappingB.originalColumn;\n\t  if (cmp !== 0) {\n\t    return cmp;\n\t  }\n\n\t  return mappingA.name - mappingB.name;\n\t}\n\texports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;\n\n\tfunction strcmp(aStr1, aStr2) {\n\t  if (aStr1 === aStr2) {\n\t    return 0;\n\t  }\n\n\t  if (aStr1 > aStr2) {\n\t    return 1;\n\t  }\n\n\t  return -1;\n\t}\n\n\t/**\n\t * Comparator between two mappings with inflated source and name strings where\n\t * the generated positions are compared.\n\t */\n\tfunction compareByGeneratedPositionsInflated(mappingA, mappingB) {\n\t  var cmp = mappingA.generatedLine - mappingB.generatedLine;\n\t  if (cmp !== 0) {\n\t    return cmp;\n\t  }\n\n\t  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n\t  if (cmp !== 0) {\n\t    return cmp;\n\t  }\n\n\t  cmp = strcmp(mappingA.source, mappingB.source);\n\t  if (cmp !== 0) {\n\t    return cmp;\n\t  }\n\n\t  cmp = mappingA.originalLine - mappingB.originalLine;\n\t  if (cmp !== 0) {\n\t    return cmp;\n\t  }\n\n\t  cmp = mappingA.originalColumn - mappingB.originalColumn;\n\t  if (cmp !== 0) {\n\t    return cmp;\n\t  }\n\n\t  return strcmp(mappingA.name, mappingB.name);\n\t}\n\texports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t/* -*- Mode: js; js-indent-level: 2; -*- */\n\t/*\n\t * Copyright 2011 Mozilla Foundation and contributors\n\t * Licensed under the New BSD license. See LICENSE or:\n\t * http://opensource.org/licenses/BSD-3-Clause\n\t */\n\n\texports.GREATEST_LOWER_BOUND = 1;\n\texports.LEAST_UPPER_BOUND = 2;\n\n\t/**\n\t * Recursive implementation of binary search.\n\t *\n\t * @param aLow Indices here and lower do not contain the needle.\n\t * @param aHigh Indices here and higher do not contain the needle.\n\t * @param aNeedle The element being searched for.\n\t * @param aHaystack The non-empty array being searched.\n\t * @param aCompare Function which takes two elements and returns -1, 0, or 1.\n\t * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n\t *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n\t *     closest element that is smaller than or greater than the one we are\n\t *     searching for, respectively, if the exact element cannot be found.\n\t */\n\tfunction recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {\n\t  // This function terminates when one of the following is true:\n\t  //\n\t  //   1. We find the exact element we are looking for.\n\t  //\n\t  //   2. We did not find the exact element, but we can return the index of\n\t  //      the next-closest element.\n\t  //\n\t  //   3. We did not find the exact element, and there is no next-closest\n\t  //      element than the one we are searching for, so we return -1.\n\t  var mid = Math.floor((aHigh - aLow) / 2) + aLow;\n\t  var cmp = aCompare(aNeedle, aHaystack[mid], true);\n\t  if (cmp === 0) {\n\t    // Found the element we are looking for.\n\t    return mid;\n\t  }\n\t  else if (cmp > 0) {\n\t    // Our needle is greater than aHaystack[mid].\n\t    if (aHigh - mid > 1) {\n\t      // The element is in the upper half.\n\t      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);\n\t    }\n\n\t    // The exact needle element was not found in this haystack. Determine if\n\t    // we are in termination case (3) or (2) and return the appropriate thing.\n\t    if (aBias == exports.LEAST_UPPER_BOUND) {\n\t      return aHigh < aHaystack.length ? aHigh : -1;\n\t    } else {\n\t      return mid;\n\t    }\n\t  }\n\t  else {\n\t    // Our needle is less than aHaystack[mid].\n\t    if (mid - aLow > 1) {\n\t      // The element is in the lower half.\n\t      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);\n\t    }\n\n\t    // we are in termination case (3) or (2) and return the appropriate thing.\n\t    if (aBias == exports.LEAST_UPPER_BOUND) {\n\t      return mid;\n\t    } else {\n\t      return aLow < 0 ? -1 : aLow;\n\t    }\n\t  }\n\t}\n\n\t/**\n\t * This is an implementation of binary search which will always try and return\n\t * the index of the closest element if there is no exact hit. This is because\n\t * mappings between original and generated line/col pairs are single points,\n\t * and there is an implicit region between each of them, so a miss just means\n\t * that you aren't on the very start of a region.\n\t *\n\t * @param aNeedle The element you are looking for.\n\t * @param aHaystack The array that is being searched.\n\t * @param aCompare A function which takes the needle and an element in the\n\t *     array and returns -1, 0, or 1 depending on whether the needle is less\n\t *     than, equal to, or greater than the element, respectively.\n\t * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n\t *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n\t *     closest element that is smaller than or greater than the one we are\n\t *     searching for, respectively, if the exact element cannot be found.\n\t *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.\n\t */\n\texports.search = function search(aNeedle, aHaystack, aCompare, aBias) {\n\t  if (aHaystack.length === 0) {\n\t    return -1;\n\t  }\n\n\t  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,\n\t                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);\n\t  if (index < 0) {\n\t    return -1;\n\t  }\n\n\t  // We have found either the exact element, or the next-closest element than\n\t  // the one we are searching for. However, there may be more than one such\n\t  // element. Make sure we always return the smallest of these.\n\t  while (index - 1 >= 0) {\n\t    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {\n\t      break;\n\t    }\n\t    --index;\n\t  }\n\n\t  return index;\n\t};\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* -*- Mode: js; js-indent-level: 2; -*- */\n\t/*\n\t * Copyright 2011 Mozilla Foundation and contributors\n\t * Licensed under the New BSD license. See LICENSE or:\n\t * http://opensource.org/licenses/BSD-3-Clause\n\t */\n\n\tvar util = __webpack_require__(1);\n\tvar has = Object.prototype.hasOwnProperty;\n\n\t/**\n\t * A data structure which is a combination of an array and a set. Adding a new\n\t * member is O(1), testing for membership is O(1), and finding the index of an\n\t * element is O(1). Removing elements from the set is not supported. Only\n\t * strings are supported for membership.\n\t */\n\tfunction ArraySet() {\n\t  this._array = [];\n\t  this._set = Object.create(null);\n\t}\n\n\t/**\n\t * Static method for creating ArraySet instances from an existing array.\n\t */\n\tArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {\n\t  var set = new ArraySet();\n\t  for (var i = 0, len = aArray.length; i < len; i++) {\n\t    set.add(aArray[i], aAllowDuplicates);\n\t  }\n\t  return set;\n\t};\n\n\t/**\n\t * Return how many unique items are in this ArraySet. If duplicates have been\n\t * added, than those do not count towards the size.\n\t *\n\t * @returns Number\n\t */\n\tArraySet.prototype.size = function ArraySet_size() {\n\t  return Object.getOwnPropertyNames(this._set).length;\n\t};\n\n\t/**\n\t * Add the given string to this set.\n\t *\n\t * @param String aStr\n\t */\n\tArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {\n\t  var sStr = util.toSetString(aStr);\n\t  var isDuplicate = has.call(this._set, sStr);\n\t  var idx = this._array.length;\n\t  if (!isDuplicate || aAllowDuplicates) {\n\t    this._array.push(aStr);\n\t  }\n\t  if (!isDuplicate) {\n\t    this._set[sStr] = idx;\n\t  }\n\t};\n\n\t/**\n\t * Is the given string a member of this set?\n\t *\n\t * @param String aStr\n\t */\n\tArraySet.prototype.has = function ArraySet_has(aStr) {\n\t  var sStr = util.toSetString(aStr);\n\t  return has.call(this._set, sStr);\n\t};\n\n\t/**\n\t * What is the index of the given string in the array?\n\t *\n\t * @param String aStr\n\t */\n\tArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {\n\t  var sStr = util.toSetString(aStr);\n\t  if (has.call(this._set, sStr)) {\n\t    return this._set[sStr];\n\t  }\n\t  throw new Error('\"' + aStr + '\" is not in the set.');\n\t};\n\n\t/**\n\t * What is the element at the given index?\n\t *\n\t * @param Number aIdx\n\t */\n\tArraySet.prototype.at = function ArraySet_at(aIdx) {\n\t  if (aIdx >= 0 && aIdx < this._array.length) {\n\t    return this._array[aIdx];\n\t  }\n\t  throw new Error('No element indexed by ' + aIdx);\n\t};\n\n\t/**\n\t * Returns the array representation of this set (which has the proper indices\n\t * indicated by indexOf). Note that this is a copy of the internal array used\n\t * for storing the members so that no one can mess with internal state.\n\t */\n\tArraySet.prototype.toArray = function ArraySet_toArray() {\n\t  return this._array.slice();\n\t};\n\n\texports.ArraySet = ArraySet;\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* -*- Mode: js; js-indent-level: 2; -*- */\n\t/*\n\t * Copyright 2011 Mozilla Foundation and contributors\n\t * Licensed under the New BSD license. See LICENSE or:\n\t * http://opensource.org/licenses/BSD-3-Clause\n\t *\n\t * Based on the Base 64 VLQ implementation in Closure Compiler:\n\t * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java\n\t *\n\t * Copyright 2011 The Closure Compiler Authors. All rights reserved.\n\t * Redistribution and use in source and binary forms, with or without\n\t * modification, are permitted provided that the following conditions are\n\t * met:\n\t *\n\t *  * Redistributions of source code must retain the above copyright\n\t *    notice, this list of conditions and the following disclaimer.\n\t *  * Redistributions in binary form must reproduce the above\n\t *    copyright notice, this list of conditions and the following\n\t *    disclaimer in the documentation and/or other materials provided\n\t *    with the distribution.\n\t *  * Neither the name of Google Inc. nor the names of its\n\t *    contributors may be used to endorse or promote products derived\n\t *    from this software without specific prior written permission.\n\t *\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\t * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\t * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\t * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\t * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\t * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\t * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\t * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\t * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\t * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t */\n\n\tvar base64 = __webpack_require__(5);\n\n\t// A single base 64 digit can contain 6 bits of data. For the base 64 variable\n\t// length quantities we use in the source map spec, the first bit is the sign,\n\t// the next four bits are the actual value, and the 6th bit is the\n\t// continuation bit. The continuation bit tells us whether there are more\n\t// digits in this value following this digit.\n\t//\n\t//   Continuation\n\t//   |    Sign\n\t//   |    |\n\t//   V    V\n\t//   101011\n\n\tvar VLQ_BASE_SHIFT = 5;\n\n\t// binary: 100000\n\tvar VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n\n\t// binary: 011111\n\tvar VLQ_BASE_MASK = VLQ_BASE - 1;\n\n\t// binary: 100000\n\tvar VLQ_CONTINUATION_BIT = VLQ_BASE;\n\n\t/**\n\t * Converts from a two-complement value to a value where the sign bit is\n\t * placed in the least significant bit.  For example, as decimals:\n\t *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)\n\t *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)\n\t */\n\tfunction toVLQSigned(aValue) {\n\t  return aValue < 0\n\t    ? ((-aValue) << 1) + 1\n\t    : (aValue << 1) + 0;\n\t}\n\n\t/**\n\t * Converts to a two-complement value from a value where the sign bit is\n\t * placed in the least significant bit.  For example, as decimals:\n\t *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1\n\t *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2\n\t */\n\tfunction fromVLQSigned(aValue) {\n\t  var isNegative = (aValue & 1) === 1;\n\t  var shifted = aValue >> 1;\n\t  return isNegative\n\t    ? -shifted\n\t    : shifted;\n\t}\n\n\t/**\n\t * Returns the base 64 VLQ encoded value.\n\t */\n\texports.encode = function base64VLQ_encode(aValue) {\n\t  var encoded = \"\";\n\t  var digit;\n\n\t  var vlq = toVLQSigned(aValue);\n\n\t  do {\n\t    digit = vlq & VLQ_BASE_MASK;\n\t    vlq >>>= VLQ_BASE_SHIFT;\n\t    if (vlq > 0) {\n\t      // There are still more digits in this value, so we must make sure the\n\t      // continuation bit is marked.\n\t      digit |= VLQ_CONTINUATION_BIT;\n\t    }\n\t    encoded += base64.encode(digit);\n\t  } while (vlq > 0);\n\n\t  return encoded;\n\t};\n\n\t/**\n\t * Decodes the next base 64 VLQ value from the given string and returns the\n\t * value and the rest of the string via the out parameter.\n\t */\n\texports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {\n\t  var strLen = aStr.length;\n\t  var result = 0;\n\t  var shift = 0;\n\t  var continuation, digit;\n\n\t  do {\n\t    if (aIndex >= strLen) {\n\t      throw new Error(\"Expected more digits in base 64 VLQ value.\");\n\t    }\n\n\t    digit = base64.decode(aStr.charCodeAt(aIndex++));\n\t    if (digit === -1) {\n\t      throw new Error(\"Invalid base64 digit: \" + aStr.charAt(aIndex - 1));\n\t    }\n\n\t    continuation = !!(digit & VLQ_CONTINUATION_BIT);\n\t    digit &= VLQ_BASE_MASK;\n\t    result = result + (digit << shift);\n\t    shift += VLQ_BASE_SHIFT;\n\t  } while (continuation);\n\n\t  aOutParam.value = fromVLQSigned(result);\n\t  aOutParam.rest = aIndex;\n\t};\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t/* -*- Mode: js; js-indent-level: 2; -*- */\n\t/*\n\t * Copyright 2011 Mozilla Foundation and contributors\n\t * Licensed under the New BSD license. See LICENSE or:\n\t * http://opensource.org/licenses/BSD-3-Clause\n\t */\n\n\tvar intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n\t/**\n\t * Encode an integer in the range of 0 to 63 to a single base 64 digit.\n\t */\n\texports.encode = function (number) {\n\t  if (0 <= number && number < intToCharMap.length) {\n\t    return intToCharMap[number];\n\t  }\n\t  throw new TypeError(\"Must be between 0 and 63: \" + number);\n\t};\n\n\t/**\n\t * Decode a single base 64 character code digit to an integer. Returns -1 on\n\t * failure.\n\t */\n\texports.decode = function (charCode) {\n\t  var bigA = 65;     // 'A'\n\t  var bigZ = 90;     // 'Z'\n\n\t  var littleA = 97;  // 'a'\n\t  var littleZ = 122; // 'z'\n\n\t  var zero = 48;     // '0'\n\t  var nine = 57;     // '9'\n\n\t  var plus = 43;     // '+'\n\t  var slash = 47;    // '/'\n\n\t  var littleOffset = 26;\n\t  var numberOffset = 52;\n\n\t  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ\n\t  if (bigA <= charCode && charCode <= bigZ) {\n\t    return (charCode - bigA);\n\t  }\n\n\t  // 26 - 51: abcdefghijklmnopqrstuvwxyz\n\t  if (littleA <= charCode && charCode <= littleZ) {\n\t    return (charCode - littleA + littleOffset);\n\t  }\n\n\t  // 52 - 61: 0123456789\n\t  if (zero <= charCode && charCode <= nine) {\n\t    return (charCode - zero + numberOffset);\n\t  }\n\n\t  // 62: +\n\t  if (charCode == plus) {\n\t    return 62;\n\t  }\n\n\t  // 63: /\n\t  if (charCode == slash) {\n\t    return 63;\n\t  }\n\n\t  // Invalid base64 digit.\n\t  return -1;\n\t};\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t/* -*- Mode: js; js-indent-level: 2; -*- */\n\t/*\n\t * Copyright 2011 Mozilla Foundation and contributors\n\t * Licensed under the New BSD license. See LICENSE or:\n\t * http://opensource.org/licenses/BSD-3-Clause\n\t */\n\n\t// It turns out that some (most?) JavaScript engines don't self-host\n\t// `Array.prototype.sort`. This makes sense because C++ will likely remain\n\t// faster than JS when doing raw CPU-intensive sorting. However, when using a\n\t// custom comparator function, calling back and forth between the VM's C++ and\n\t// JIT'd JS is rather slow *and* loses JIT type information, resulting in\n\t// worse generated code for the comparator function than would be optimal. In\n\t// fact, when sorting with a comparator, these costs outweigh the benefits of\n\t// sorting in C++. By using our own JS-implemented Quick Sort (below), we get\n\t// a ~3500ms mean speed-up in `bench/bench.html`.\n\n\t/**\n\t * Swap the elements indexed by `x` and `y` in the array `ary`.\n\t *\n\t * @param {Array} ary\n\t *        The array.\n\t * @param {Number} x\n\t *        The index of the first item.\n\t * @param {Number} y\n\t *        The index of the second item.\n\t */\n\tfunction swap(ary, x, y) {\n\t  var temp = ary[x];\n\t  ary[x] = ary[y];\n\t  ary[y] = temp;\n\t}\n\n\t/**\n\t * Returns a random integer within the range `low .. high` inclusive.\n\t *\n\t * @param {Number} low\n\t *        The lower bound on the range.\n\t * @param {Number} high\n\t *        The upper bound on the range.\n\t */\n\tfunction randomIntInRange(low, high) {\n\t  return Math.round(low + (Math.random() * (high - low)));\n\t}\n\n\t/**\n\t * The Quick Sort algorithm.\n\t *\n\t * @param {Array} ary\n\t *        An array to sort.\n\t * @param {function} comparator\n\t *        Function to use to compare two items.\n\t * @param {Number} p\n\t *        Start index of the array\n\t * @param {Number} r\n\t *        End index of the array\n\t */\n\tfunction doQuickSort(ary, comparator, p, r) {\n\t  // If our lower bound is less than our upper bound, we (1) partition the\n\t  // array into two pieces and (2) recurse on each half. If it is not, this is\n\t  // the empty array and our base case.\n\n\t  if (p < r) {\n\t    // (1) Partitioning.\n\t    //\n\t    // The partitioning chooses a pivot between `p` and `r` and moves all\n\t    // elements that are less than or equal to the pivot to the before it, and\n\t    // all the elements that are greater than it after it. The effect is that\n\t    // once partition is done, the pivot is in the exact place it will be when\n\t    // the array is put in sorted order, and it will not need to be moved\n\t    // again. This runs in O(n) time.\n\n\t    // Always choose a random pivot so that an input array which is reverse\n\t    // sorted does not cause O(n^2) running time.\n\t    var pivotIndex = randomIntInRange(p, r);\n\t    var i = p - 1;\n\n\t    swap(ary, pivotIndex, r);\n\t    var pivot = ary[r];\n\n\t    // Immediately after `j` is incremented in this loop, the following hold\n\t    // true:\n\t    //\n\t    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.\n\t    //\n\t    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.\n\t    for (var j = p; j < r; j++) {\n\t      if (comparator(ary[j], pivot) <= 0) {\n\t        i += 1;\n\t        swap(ary, i, j);\n\t      }\n\t    }\n\n\t    swap(ary, i + 1, j);\n\t    var q = i + 1;\n\n\t    // (2) Recurse on each half.\n\n\t    doQuickSort(ary, comparator, p, q - 1);\n\t    doQuickSort(ary, comparator, q + 1, r);\n\t  }\n\t}\n\n\t/**\n\t * Sort the given array in-place with the given comparator function.\n\t *\n\t * @param {Array} ary\n\t *        An array to sort.\n\t * @param {function} comparator\n\t *        Function to use to compare two items.\n\t */\n\texports.quickSort = function (ary, comparator) {\n\t  doQuickSort(ary, comparator, 0, ary.length - 1);\n\t};\n\n\n/***/ }\n/******/ ]);","(function(root, factory) {\n    'use strict';\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.\n\n    /* istanbul ignore next */\n    if (typeof define === 'function' && define.amd) {\n        define('stacktrace-gps', ['source-map', 'stackframe'], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory(require('source-map/lib/source-map-consumer'), require('stackframe'));\n    } else {\n        root.StackTraceGPS = factory(root.SourceMap || root.sourceMap, root.StackFrame);\n    }\n}(this, function(SourceMap, StackFrame) {\n    'use strict';\n\n    /**\n     * Make a X-Domain request to url and callback.\n     *\n     * @param {String} url\n     * @returns {Promise} with response text if fulfilled\n     */\n    function _xdr(url) {\n        return new Promise(function(resolve, reject) {\n            var req = new XMLHttpRequest();\n            req.open('get', url);\n            req.onerror = reject;\n            req.onreadystatechange = function onreadystatechange() {\n                if (req.readyState === 4) {\n                    if ((req.status >= 200 && req.status < 300) ||\n                        (url.substr(0, 7) === 'file://' && req.responseText)) {\n                        resolve(req.responseText);\n                    } else {\n                        reject(new Error('HTTP status: ' + req.status + ' retrieving ' + url));\n                    }\n                }\n            };\n            req.send();\n        });\n\n    }\n\n    /**\n     * Convert a Base64-encoded string into its original representation.\n     * Used for inline sourcemaps.\n     *\n     * @param {String} b64str Base-64 encoded string\n     * @returns {String} original representation of the base64-encoded string.\n     */\n    function _atob(b64str) {\n        if (typeof window !== 'undefined' && window.atob) {\n            return window.atob(b64str);\n        } else {\n            throw new Error('You must supply a polyfill for window.atob in this environment');\n        }\n    }\n\n    function _parseJson(string) {\n        if (typeof JSON !== 'undefined' && JSON.parse) {\n            return JSON.parse(string);\n        } else {\n            throw new Error('You must supply a polyfill for JSON.parse in this environment');\n        }\n    }\n\n    function _findFunctionName(source, lineNumber/*, columnNumber*/) {\n        var syntaxes = [\n            // {name} = function ({args}) TODO args capture\n            /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*function\\b/,\n            // function {name}({args}) m[1]=name m[2]=args\n            /function\\s+([^('\"`]*?)\\s*\\(([^)]*)\\)/,\n            // {name} = eval()\n            /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*(?:eval|new Function)\\b/,\n            // fn_name() {\n            /\\b(?!(?:if|for|switch|while|with|catch)\\b)(?:(?:static)\\s+)?(\\S+)\\s*\\(.*?\\)\\s*\\{/,\n            // {name} = () => {\n            /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*\\(.*?\\)\\s*=>/\n        ];\n        var lines = source.split('\\n');\n\n        // Walk backwards in the source lines until we find the line which matches one of the patterns above\n        var code = '';\n        var maxLines = Math.min(lineNumber, 20);\n        for (var i = 0; i < maxLines; ++i) {\n            // lineNo is 1-based, source[] is 0-based\n            var line = lines[lineNumber - i - 1];\n            var commentPos = line.indexOf('//');\n            if (commentPos >= 0) {\n                line = line.substr(0, commentPos);\n            }\n\n            if (line) {\n                code = line + code;\n                var len = syntaxes.length;\n                for (var index = 0; index < len; index++) {\n                    var m = syntaxes[index].exec(code);\n                    if (m && m[1]) {\n                        return m[1];\n                    }\n                }\n            }\n        }\n        return undefined;\n    }\n\n    function _ensureSupportedEnvironment() {\n        if (typeof Object.defineProperty !== 'function' || typeof Object.create !== 'function') {\n            throw new Error('Unable to consume source maps in older browsers');\n        }\n    }\n\n    function _ensureStackFrameIsLegit(stackframe) {\n        if (typeof stackframe !== 'object') {\n            throw new TypeError('Given StackFrame is not an object');\n        } else if (typeof stackframe.fileName !== 'string') {\n            throw new TypeError('Given file name is not a String');\n        } else if (typeof stackframe.lineNumber !== 'number' ||\n            stackframe.lineNumber % 1 !== 0 ||\n            stackframe.lineNumber < 1) {\n            throw new TypeError('Given line number must be a positive integer');\n        } else if (typeof stackframe.columnNumber !== 'number' ||\n            stackframe.columnNumber % 1 !== 0 ||\n            stackframe.columnNumber < 0) {\n            throw new TypeError('Given column number must be a non-negative integer');\n        }\n        return true;\n    }\n\n    function _findSourceMappingURL(source) {\n        var m = /\\/\\/[#@] ?sourceMappingURL=([^\\s'\"]+)\\s*$/m.exec(source);\n        if (m && m[1]) {\n            return m[1];\n        } else {\n            throw new Error('sourceMappingURL not found');\n        }\n    }\n\n    function _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache) {\n        return new Promise(function(resolve, reject) {\n            var loc = sourceMapConsumer.originalPositionFor({\n                line: stackframe.lineNumber,\n                column: stackframe.columnNumber\n            });\n\n            if (loc.source) {\n                // cache mapped sources\n                var mappedSource = sourceMapConsumer.sourceContentFor(loc.source);\n                if (mappedSource) {\n                    sourceCache[loc.source] = mappedSource;\n                }\n\n                resolve(\n                    // given stackframe and source location, update stackframe\n                    new StackFrame({\n                        functionName: loc.name || stackframe.functionName,\n                        args: stackframe.args,\n                        fileName: loc.source,\n                        lineNumber: loc.line,\n                        columnNumber: loc.column\n                    }));\n            } else {\n                reject(new Error('Could not get original source for given stackframe and source map'));\n            }\n        });\n    }\n\n    /**\n     * @constructor\n     * @param {Object} opts\n     *      opts.sourceCache = {url: \"Source String\"} => preload source cache\n     *      opts.sourceMapConsumerCache = {/path/file.js.map: SourceMapConsumer}\n     *      opts.offline = True to prevent network requests.\n     *              Best effort without sources or source maps.\n     *      opts.ajax = Promise returning function to make X-Domain requests\n     */\n    return function StackTraceGPS(opts) {\n        if (!(this instanceof StackTraceGPS)) {\n            return new StackTraceGPS(opts);\n        }\n        opts = opts || {};\n\n        this.sourceCache = opts.sourceCache || {};\n        this.sourceMapConsumerCache = opts.sourceMapConsumerCache || {};\n\n        this.ajax = opts.ajax || _xdr;\n\n        this._atob = opts.atob || _atob;\n\n        this._get = function _get(location) {\n            return new Promise(function(resolve, reject) {\n                var isDataUrl = location.substr(0, 5) === 'data:';\n                if (this.sourceCache[location]) {\n                    resolve(this.sourceCache[location]);\n                } else if (opts.offline && !isDataUrl) {\n                    reject(new Error('Cannot make network requests in offline mode'));\n                } else {\n                    if (isDataUrl) {\n                        // data URLs can have parameters.\n                        // see http://tools.ietf.org/html/rfc2397\n                        var supportedEncodingRegexp =\n                            /^data:application\\/json;([\\w=:\"-]+;)*base64,/;\n                        var match = location.match(supportedEncodingRegexp);\n                        if (match) {\n                            var sourceMapStart = match[0].length;\n                            var encodedSource = location.substr(sourceMapStart);\n                            var source = this._atob(encodedSource);\n                            this.sourceCache[location] = source;\n                            resolve(source);\n                        } else {\n                            reject(new Error('The encoding of the inline sourcemap is not supported'));\n                        }\n                    } else {\n                        var xhrPromise = this.ajax(location, {method: 'get'});\n                        // Cache the Promise to prevent duplicate in-flight requests\n                        this.sourceCache[location] = xhrPromise;\n                        xhrPromise.then(resolve, reject);\n                    }\n                }\n            }.bind(this));\n        };\n\n        /**\n         * Creating SourceMapConsumers is expensive, so this wraps the creation of a\n         * SourceMapConsumer in a per-instance cache.\n         *\n         * @param sourceMappingURL = {String} URL to fetch source map from\n         * @param defaultSourceRoot = Default source root for source map if undefined\n         * @returns {Promise} that resolves a SourceMapConsumer\n         */\n        this._getSourceMapConsumer = function _getSourceMapConsumer(sourceMappingURL, defaultSourceRoot) {\n            return new Promise(function(resolve, reject) {\n                if (this.sourceMapConsumerCache[sourceMappingURL]) {\n                    resolve(this.sourceMapConsumerCache[sourceMappingURL]);\n                } else {\n                    var sourceMapConsumerPromise = new Promise(function(resolve, reject) {\n                        return this._get(sourceMappingURL).then(function(sourceMapSource) {\n                            if (typeof sourceMapSource === 'string') {\n                                sourceMapSource = _parseJson(sourceMapSource.replace(/^\\)\\]\\}'/, ''));\n                            }\n                            if (typeof sourceMapSource.sourceRoot === 'undefined') {\n                                sourceMapSource.sourceRoot = defaultSourceRoot;\n                            }\n\n                            resolve(new SourceMap.SourceMapConsumer(sourceMapSource));\n                        }, reject);\n                    }.bind(this));\n                    this.sourceMapConsumerCache[sourceMappingURL] = sourceMapConsumerPromise;\n                    resolve(sourceMapConsumerPromise);\n                }\n            }.bind(this));\n        };\n\n        /**\n         * Given a StackFrame, enhance function name and use source maps for a\n         * better StackFrame.\n         *\n         * @param {StackFrame} stackframe object\n         * @returns {Promise} that resolves with with source-mapped StackFrame\n         */\n        this.pinpoint = function StackTraceGPS$$pinpoint(stackframe) {\n            return new Promise(function(resolve, reject) {\n                this.getMappedLocation(stackframe).then(function(mappedStackFrame) {\n                    function resolveMappedStackFrame() {\n                        resolve(mappedStackFrame);\n                    }\n\n                    this.findFunctionName(mappedStackFrame)\n                        .then(resolve, resolveMappedStackFrame)\n                        ['catch'](resolveMappedStackFrame);\n                }.bind(this), reject);\n            }.bind(this));\n        };\n\n        /**\n         * Given a StackFrame, guess function name from location information.\n         *\n         * @param {StackFrame} stackframe\n         * @returns {Promise} that resolves with enhanced StackFrame.\n         */\n        this.findFunctionName = function StackTraceGPS$$findFunctionName(stackframe) {\n            return new Promise(function(resolve, reject) {\n                _ensureStackFrameIsLegit(stackframe);\n                this._get(stackframe.fileName).then(function getSourceCallback(source) {\n                    var lineNumber = stackframe.lineNumber;\n                    var columnNumber = stackframe.columnNumber;\n                    var guessedFunctionName = _findFunctionName(source, lineNumber, columnNumber);\n                    // Only replace functionName if we found something\n                    if (guessedFunctionName) {\n                        resolve(new StackFrame({\n                            functionName: guessedFunctionName,\n                            args: stackframe.args,\n                            fileName: stackframe.fileName,\n                            lineNumber: lineNumber,\n                            columnNumber: columnNumber\n                        }));\n                    } else {\n                        resolve(stackframe);\n                    }\n                }, reject)['catch'](reject);\n            }.bind(this));\n        };\n\n        /**\n         * Given a StackFrame, seek source-mapped location and return new enhanced StackFrame.\n         *\n         * @param {StackFrame} stackframe\n         * @returns {Promise} that resolves with enhanced StackFrame.\n         */\n        this.getMappedLocation = function StackTraceGPS$$getMappedLocation(stackframe) {\n            return new Promise(function(resolve, reject) {\n                _ensureSupportedEnvironment();\n                _ensureStackFrameIsLegit(stackframe);\n\n                var sourceCache = this.sourceCache;\n                var fileName = stackframe.fileName;\n                this._get(fileName).then(function(source) {\n                    var sourceMappingURL = _findSourceMappingURL(source);\n                    var isDataUrl = sourceMappingURL.substr(0, 5) === 'data:';\n                    var defaultSourceRoot = fileName.substring(0, fileName.lastIndexOf('/') + 1);\n\n                    if (sourceMappingURL[0] !== '/' && !isDataUrl && !(/^https?:\\/\\/|^\\/\\//i).test(sourceMappingURL)) {\n                        sourceMappingURL = defaultSourceRoot + sourceMappingURL;\n                    }\n\n                    return this._getSourceMapConsumer(sourceMappingURL, defaultSourceRoot).then(function(sourceMapConsumer) {\n                        return _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache)\n                            .then(resolve)['catch'](function() {\n                            resolve(stackframe);\n                        });\n                    });\n                }.bind(this), reject)['catch'](reject);\n            }.bind(this));\n        };\n    };\n}));\n"]}